/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,22],$V2=[1,20],$V3=[1,21],$V4=[1,44],$V5=[1,34],$V6=[1,35],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[1,42],$Vc=[1,43],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,29],$Vi=[1,30],$Vj=[1,28],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[5,22,23,30,31,32,34,44,55,58,60,61,62,63,64,67,68,69,70,74,75,76,80,81,82,89,92],$Vo=[2,74],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[1,64],$VA=[1,65],$VB=[1,70],$VC=[1,75],$VD=[24,28,34,35,43,44,45,46,47,48,49,50,51,52,53,54,59],$VE=[1,84],$VF=[1,89],$VG=[1,97],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[24,28,34,35,43,44,49,50,51,52,53,54,59],$VL=[34,35],$VM=[26,28,35,41,59],$VN=[35,59],$VO=[24,28,34,35,43,44,45,46,49,50,51,52,53,54,59],$VP=[24,28,34,35,49,50,51,52,53,54,59],$VQ=[24,28,34,35,51,52,53,54,59],$VR=[5,22,23,30,31,32,34,44,55,58,60,61,62,63,64,67,68,69,70,73,74,75,76,80,81,82,89,92],$VS=[1,162],$VT=[26,28],$VU=[1,175],$VV=[1,189],$VW=[1,191],$VX=[1,208],$VY=[1,217],$VZ=[34,80,81],$V_=[2,115],$V$=[34,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_LET":7,"DECLARACION_CONST":8,"DECLARACION_TYPE":9,"DECLARACION_SIN_TIPO":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"LLAMADA_FUNCION":20,"FUNCIONES":21,"PR_LET":22,"ID":23,":":24,"TIPO":25,"=":26,"EXPRESION":27,";":28,"ARREGLO":29,"PR_CONST":30,"PR_TYPE":31,"{":32,"DATOS_PRIMITIVOS":33,"}":34,",":35,"DATO_PRIMITIVO":36,"TIPO_TYPE":37,"PR_NUMBER":38,"PR_STRING":39,"PR_BOOLEAN":40,"[":41,"]":42,"+":43,"-":44,"*":45,"/":46,"%":47,"^":48,"<":49,">":50,"==":51,"!=":52,"&&":53,"||":54,"!":55,"IDENTIFICADOR":56,"EXPRESION_JSON":57,"(":58,")":59,"CADENA":60,"NUMERO":61,"DECIMAL":62,"PR_TRUE":63,"PR_FALSE":64,"OBJETOS":65,"OBJECT":66,"PR_BREAK":67,"PR_CONTINUE":68,"PR_RETURN":69,"PR_IF":70,"SENTENCIA":71,"ELSEIF":72,"PR_ELSE":73,"PR_WHILE":74,"PR_DO":75,"PR_SWITCH":76,"CASES":77,"DEFAULT":78,"CASE":79,"PR_CASE":80,"PR_DEFAULT":81,"PR_FOR":82,"DECLARACION_FOR":83,"FOREXP":84,"TIPOFOR":85,"PR_VAR":86,"PR_OF":87,"PR_IN":88,"PR_CONSOLE":89,".":90,"PR_LOG":91,"PR_FUNCTION":92,"SENTENCIA_FUNCION":93,"PARAMETROS":94,"FUNCIONHIJA":95,"FUNCION_HIJA":96,"OTRA_INSTRUCCION":97,"PARAMETRO":98,"PARAMETROS_LLAMADA":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"PR_LET",23:"ID",24:":",26:"=",28:";",30:"PR_CONST",31:"PR_TYPE",32:"{",34:"}",35:",",38:"PR_NUMBER",39:"PR_STRING",40:"PR_BOOLEAN",41:"[",42:"]",43:"+",44:"-",45:"*",46:"/",47:"%",48:"^",49:"<",50:">",51:"==",52:"!=",53:"&&",54:"||",55:"!",58:"(",59:")",60:"CADENA",61:"NUMERO",62:"DECIMAL",63:"PR_TRUE",64:"PR_FALSE",67:"PR_BREAK",68:"PR_CONTINUE",69:"PR_RETURN",70:"PR_IF",73:"PR_ELSE",74:"PR_WHILE",75:"PR_DO",76:"PR_SWITCH",80:"PR_CASE",81:"PR_DEFAULT",82:"PR_FOR",86:"PR_VAR",87:"PR_OF",88:"PR_IN",89:"PR_CONSOLE",90:".",91:"PR_LOG",92:"PR_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,8],[7,6],[7,6],[7,4],[8,7],[8,5],[10,6],[10,7],[10,4],[10,2],[9,7],[33,3],[33,1],[36,3],[37,1],[37,1],[37,1],[37,1],[25,1],[25,1],[25,1],[25,1],[29,2],[29,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,2],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,1],[27,1],[56,3],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[57,3],[65,3],[65,1],[66,3],[11,2],[12,2],[13,2],[13,3],[14,6],[71,3],[71,2],[72,2],[72,2],[72,0],[16,5],[17,7],[15,8],[77,2],[77,1],[79,4],[78,3],[78,0],[18,9],[84,4],[84,4],[84,4],[84,5],[85,1],[85,1],[83,6],[83,4],[19,7],[21,5],[21,6],[93,3],[93,2],[95,2],[96,5],[96,6],[97,2],[97,0],[94,3],[94,1],[98,3],[20,4],[20,5],[99,3],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 77: case 93:

        this.$ = [$$[$0]]
    
break;
case 4: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 66: case 67:

        this.$ = $$[$0]
    
break;
case 5: case 17: case 122:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 18: case 38: case 86: case 87: case 115: case 117:

        this.$ = $$[$0];
    
break;
case 19:

        this.$ = new Declaracion($$[$0-5], $$[$0-3].type, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3].tipo);
    
break;
case 20:

        this.$ = new Declaracion($$[$0-3], $$[$0-1].type, null, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1].tipo);
    
break;
case 21:

        this.$ = new Declaracion($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 23:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 24:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 25: case 29:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 26: case 99: case 100:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 27:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 28:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 30:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 31:

        this.$ = new SinTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 32:

        this.$ = $$[$0-1]
    
break;
case 33:

        this.$ = new Types($$[$0-5], 3, $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 34:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2];
    
break;
case 35:

        this.$ = [$$[$0]];
    
break;
case 36:

        this.$ = new TypePrimitivo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 37: case 39: case 40:
 
        this.$ = $$[$0];
    
break;
case 41:
 
        this.$ = {type: 0, tipo: $$[$0]};
    
break;
case 42:

        this.$ = {type: 1, tipo: $$[$0]};
    
break;
case 43:
 
        this.$ = {type: 2, tipo: $$[$0]};
    
break;
case 44:
 
        this.$ = {type: 3, tipo: $$[$0]};
    
break;
case 45:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 46:
 
        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 47:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 48:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.MULTIPLICACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 51:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 52:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.EXPONENTE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Aritmetica($$[$0-3], $$[$0], OpcionAritmetica.EXPONENTE, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 54:

        this.$ = new Aritmetica($$[$0], $$[$0], OpcionAritmetica.NEGATIVO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 55:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 56:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Relacional($$[$0-3], $$[$0], OpcionRelacional.MENOR_IGUAL, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 58:

        this.$ = new Relacional($$[$0-3], $$[$0], OpcionRelacional.MAYOR_IGUAL, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 59:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.IGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 60:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.DIFERENTE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Logica($$[$0-2], $$[$0], OpcionLogica.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 62:

        this.$ = new Logica($$[$0-2], $$[$0], OpcionLogica.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Logica($$[$0], $$[$0], OpcionLogica.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 64:

        this.$ = new Aritmetica($$[$0-2], $$[$0-2], OpcionAritmetica.INCREMENTO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Aritmetica($$[$0-2], $$[$0-2], OpcionAritmetica.DECREMENTO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 68: case 85: case 110: case 111: case 114:

        this.$ = $$[$0-1];
    
break;
case 69:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 70: case 71:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 72: case 73:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 74:
 
        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 75:

        this.$ = new LiteralObjeto($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 76:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 78:

        this.$ = new Value($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 79:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 80:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 81:

        this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 82:

        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 83:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 84:

        this.$ = new Sentencia($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 88: case 96:

        this.$ = null;
    
break;
case 89:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 90:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 91:

        this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 92:

        this.$ = $$[$0-1].push($$[$0])
        this.$ = $$[$0-1]
    
break;
case 94:

        this.$ = new Case($$[$0-2], new Sentencia($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 95:

        this.$ = new Default(new Sentencia($$[$0], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 97:

        this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 98:

       this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 101:

        this.$ = {node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 102:

        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 103:
 
        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 104:

        this.$ = new Declaracion($$[$0-4], $$[$0-2].type, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 105:

        this.$ = new Declaracion($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 106:

        this.$ =  new Imprimir($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 107: case 112:

        this.$ = $$[$0-4];
    
break;
case 108: case 113:

        this.$ = $$[$0-5];
    
break;
case 109: case 116: case 118:

        this.$ = $$[$0-2];
    
break;
case 119:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 120:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 121:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm},{1:[3]},{5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),{23:[1,47]},{23:[1,48]},{23:[1,49]},o([28,43,44,45,46,47,48,49,50,51,52,53,54],$Vo,{24:[1,50],26:[1,51],58:[1,52]}),{28:[1,53],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{28:[1,66]},{28:[1,67]},{23:$VB,27:69,28:[1,68],32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{58:[1,71]},{58:[1,72]},{58:[1,73]},{32:$VC,71:74},{58:[1,76]},{90:[1,77]},{23:[1,78]},{23:$VB,27:79,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:80,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VD,[2,66]),o($VD,[2,67]),{23:$VB,27:81,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VD,[2,69]),o($VD,[2,70]),o($VD,[2,71]),o($VD,[2,72]),o($VD,[2,73]),{23:$VE,65:82,66:83},{1:[2,1]},o($Vn,[2,2]),{24:[1,85],26:[1,86],28:[1,87],29:88,41:$VF},{24:[1,90],26:[1,91]},{26:[1,92]},{23:$VG,25:93,38:$VH,39:$VI,40:$VJ},{23:$VB,27:98,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:101,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,59:[1,99],60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,99:100},o($Vn,[2,32]),{23:$VB,27:102,32:$V4,43:[1,103],44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:104,32:$V4,44:[1,105],55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:106,32:$V4,44:$V5,45:[1,107],55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:108,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:109,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:110,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,26:[1,112],27:111,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,26:[1,114],27:113,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:115,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:116,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:117,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:118,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,79]),o($Vn,[2,80]),o($Vn,[2,81]),{28:[1,119],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},o($VD,$Vo),{23:$VB,27:120,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:121,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{23:$VB,27:122,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{74:[1,123]},{4:124,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,34:[1,125],44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm},{22:[1,127],83:126},{91:[1,128]},{58:[1,129]},o($VK,[2,54],{45:$Vr,46:$Vs,47:$Vt,48:$Vu}),o($VD,[2,63]),{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,59:[1,130]},{34:[1,131],35:[1,132]},o($VL,[2,77]),{24:[1,133]},{23:$VG,25:134,38:$VH,39:$VI,40:$VJ},{23:$VB,27:135,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,22]),{26:[1,136],28:[1,137]},{42:[1,138]},{23:$VG,25:139,38:$VH,39:$VI,40:$VJ},{23:$VB,27:140,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{32:[1,141]},{26:[1,142],29:143,41:$VF},o($VM,[2,41]),o($VM,[2,42]),o($VM,[2,43]),o($VM,[2,44]),{28:[1,144],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{28:[1,145]},{35:[1,147],59:[1,146]},o($VN,[2,122],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($VK,[2,47],{45:$Vr,46:$Vs,47:$Vt,48:$Vu}),o($VD,[2,64]),o($VK,[2,48],{45:$Vr,46:$Vs,47:$Vt,48:$Vu}),o($VD,[2,65],{56:36,57:37,27:79,23:$VB,32:$V4,55:$V6,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc}),o($VO,[2,49],{47:$Vt,48:$Vu}),{23:$VB,27:148,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VO,[2,50],{47:$Vt,48:$Vu}),o($VD,[2,51]),o($VD,[2,52]),o($VP,[2,55],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu}),{23:$VB,27:149,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VP,[2,56],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu}),{23:$VB,27:150,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VQ,[2,59],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw}),o($VQ,[2,60],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw}),o([24,28,34,35,53,54,59],[2,61],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy}),o([24,28,34,35,54,59],[2,62],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz}),o($Vn,[2,82]),{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,59:[1,151]},{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,59:[1,152]},{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,59:[1,153]},{58:[1,154]},{6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,34:[1,155],44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm},o($VR,[2,85]),{28:[1,156]},{23:[1,157]},{58:[1,158]},{23:$VS,59:[1,159],94:160,98:161},o($VD,[2,68]),o($VD,[2,75]),{23:$VE,66:163},{23:$VB,27:164,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{26:[1,165],28:[1,166],29:167,41:$VF},{28:[1,168],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{23:$VB,27:169,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,26]),o($VT,[2,45],{41:[1,170]}),{26:[1,171]},{28:[1,172],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{23:$VU,33:173,36:174},{23:$VB,27:176,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{26:[1,177]},o($Vn,[2,31]),o($Vn,[2,119]),{28:[1,178]},{23:$VB,27:179,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VO,[2,53],{47:$Vt,48:$Vu}),o($VP,[2,57],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu}),o($VP,[2,58],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu}),{32:$VC,71:180},{32:[1,181]},{32:$VC,71:182},{23:$VB,27:183,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VR,[2,84]),{23:$VB,27:184,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:[1,185],26:[1,186]},{23:$VB,27:187,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{32:$VV,93:188},{35:$VW,59:[1,190]},o($VN,[2,117]),{24:[1,192]},o($VL,[2,76]),o($VL,[2,78],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA}),{23:$VB,27:193,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,20]),{26:[1,194],28:[1,195]},o($Vn,[2,21]),{28:[1,196],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{42:[1,197]},{23:$VB,27:198,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,28]),{34:[1,199],35:[1,200]},o($VL,[2,35]),{24:[1,201]},{28:[1,202],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{23:$VB,27:203,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,120]),o($VN,[2,121],{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA}),o($Vn,[2,88],{72:204,73:[1,205]}),{77:206,79:207,80:$VX},o($Vn,[2,89]),{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,59:[1,209]},{28:[1,210],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{23:$VG,25:211,38:$VH,39:$VI,40:$VJ},{23:$VB,27:212,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,59:[1,213]},o($Vn,[2,107]),{34:[1,215],92:$VY,95:214,96:216},{32:$VV,93:218},{23:$VS,98:219},{23:$VG,25:220,38:$VH,39:$VI,40:$VJ},{28:[1,221],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{23:$VB,27:222,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,24]),o($Vn,[2,25]),o($VT,[2,46]),{28:[1,223],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{28:[1,224]},{23:$VU,36:225},{23:[1,230],37:226,38:[1,227],39:[1,228],40:[1,229]},o($Vn,[2,29]),{28:[1,231],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},o($Vn,[2,83]),{14:233,32:$VC,70:$Vg,71:232},{34:[2,96],78:234,79:235,80:$VX,81:[1,236]},o($VZ,[2,93]),{23:$VB,27:237,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{28:[1,238]},{23:$VB,27:239,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{26:[1,240]},{28:[2,105],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{28:[1,241]},{34:[1,242]},o($Vn,[2,110]),{34:$V_,92:$VY,96:244,97:243},{23:[1,245]},o($Vn,[2,108]),o($VN,[2,116]),o($VN,[2,118]),o($Vn,[2,19]),{28:[1,246],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},o($Vn,[2,27]),o($Vn,[2,33]),o($VL,[2,34]),o($VL,[2,36]),o($VL,[2,37]),o($VL,[2,38]),o($VL,[2,39]),o($VL,[2,40]),o($Vn,[2,30]),o($Vn,[2,86]),o($Vn,[2,87]),{34:[1,247]},o($VZ,[2,92]),{24:[1,248]},{24:[1,249],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},o($Vn,[2,90]),{43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,59:[1,250]},{23:$VB,27:251,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,106]),o($Vn,[2,109]),{34:[2,111]},{34:$V_,92:$VY,96:244,97:252},{58:[1,253]},o($Vn,[2,23]),o($Vn,[2,91]),{4:254,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm},{4:255,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm},{32:$VC,71:256},{28:[2,104],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA},{34:[2,114]},{23:$VS,59:[1,257],94:258,98:161},{6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,34:[2,95],44:$V5,55:$V6,56:36,57:37,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm},o($VZ,[2,94],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,27:23,56:36,57:37,6:46,22:$V0,23:$V1,30:$V2,31:$V3,32:$V4,44:$V5,55:$V6,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,92:$Vm}),o($Vn,[2,97]),{32:$VV,93:259},{35:$VW,59:[1,260]},o($V$,[2,112]),{32:$VV,93:261},o($V$,[2,113])],
defaultActions: {45:[2,1],243:[2,111],252:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Aritmetica, OpcionAritmetica} = require('../expresion/aritmetica.expresion');
    const {Relacional, OpcionRelacional} = require('../expresion/relacional.expresion');
    const {Logica, OpcionLogica} = require('../expresion/logica.expresion');
    const { Acceso } = require('../expresion/acceso.expresion');
    const { Literal } = require('../expresion/literal.expresion');
    const { LiteralObjeto } = require('../expresion/literal-objeto.expresion');
    const { Declaracion } = require('../instruccion/declaracion.instruccion');
    const { SinTipo } = require('../instruccion/sintipo.instruccion');
    const { Imprimir } = require('../instruccion/console.instruccion');
    const { While } = require('../instruccion/while.instruccion');
    const { For } = require('../instruccion/for.instruccion');
    const { If } = require('../instruccion/if.instruccion');
    const { DoWhile } = require('../instruccion/do-while.instruccion');
    const { Sentencia } = require('../instruccion/sentencia.instruccion');
    const { Switch } = require('../instruccion/switch.instruccion');
    const { Case } = require('../instruccion/case.instruccion');
    const { Default } = require('../instruccion/default.instruccion');
    const { Return } = require('../instruccion/return.instruccion');
    const { Break } = require('../instruccion/break.instruccion');
    const { Continue } = require('../instruccion/continue.instruccion');
    const { Types } = require('../instruccion/type.instruccion');
    const { TypePrimitivo } = require('../instruccion/type-primitivo.instruccion');
    const { Value } = require('../instruccion/value.instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 62
break;
case 4:return 61
break;
case 5:return 60
break;
case 6:return 60
break;
case 7:return 60
break;
case 8:return 45
break;
case 9:return 46
break;
case 10:return 44
break;
case 11:return 43
break;
case 12:return 47
break;
case 13:return 48
break;
case 14:return 28
break;
case 15:return 24
break;
case 16:return 35
break;
case 17:return 90
break;
case 18:return 49
break;
case 19:return 50
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 51
break;
case 23:return 52
break;
case 24:return 54
break;
case 25:return 53
break;
case 26:return 55
break;
case 27:return 26
break;
case 28:return 58
break;
case 29:return 59 
break;
case 30:return 32
break;
case 31:return 34
break;
case 32:return 41
break;
case 33:return 42
break;
case 34:return 34
break;
case 35:return 34
break;
case 36:return 22
break;
case 37:return 86
break;
case 38:return 30
break;
case 39:return 70
break;
case 40:return 73
break;
case 41:return 76
break;
case 42:return 81
break;
case 43:return 80
break;
case 44:return 74
break;
case 45:return 75
break;
case 46:return 82
break;
case 47:return 89
break;
case 48:return 91
break;
case 49:return 67
break;
case 50:return 68
break;
case 51:return 69
break;
case 52:return 92
break;
case 53:return 39
break;
case 54:return 38
break;
case 55:return 40
break;
case 56:return 63
break;
case 57:return 64
break;
case 58:return 87
break;
case 59:return 88
break;
case 60:return 31
break;
case 61:return 23;
break;
case 62:return 5;
break;
case 63:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:type\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisis;
exports.Parser = analisis.Parser;
exports.parse = function () { return analisis.parse.apply(analisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}