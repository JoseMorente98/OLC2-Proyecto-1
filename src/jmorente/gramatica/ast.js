/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,23],$V3=[1,21],$V4=[1,22],$V5=[1,47],$V6=[1,35],$V7=[1,36],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,30],$Vk=[1,31],$Vl=[1,29],$Vm=[1,32],$Vn=[1,33],$Vo=[1,34],$Vp=[2,5,22,23,30,32,33,35,44,55,59,61,62,63,64,65,66,69,70,71,72,76,77,78,82,83,84,91,93],$Vq=[28,43,44,45,46,47,48,49,50,51,52,53,54],$Vr=[2,74],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,74],$VF=[1,79],$VG=[24,28,35,36,43,44,45,46,47,48,49,50,51,52,53,54,60],$VH=[1,88],$VI=[1,93],$VJ=[1,101],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[24,28,35,36,43,44,49,50,51,52,53,54,60],$VO=[35,36],$VP=[26,28,33,35,36,41,60],$VQ=[2,75],$VR=[1,156],$VS=[43,44,45,46,47,48,49,50,51,52,53,54],$VT=[2,127],$VU=[1,159],$VV=[36,60],$VW=[24,28,35,36,43,44,45,46,49,50,51,52,53,54,60],$VX=[24,28,35,36,49,50,51,52,53,54,60],$VY=[24,28,35,36,51,52,53,54,60],$VZ=[2,5,22,23,30,32,33,35,44,55,59,61,62,63,64,65,66,69,70,71,72,75,76,77,78,82,83,84,91,93],$V_=[1,180],$V$=[26,28],$V01=[1,193],$V11=[2,128],$V21=[1,209],$V31=[1,210],$V41=[1,238],$V51=[35,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_LET":7,"DECLARACION_CONST":8,"DECLARACION_TYPE":9,"DECLARACION_SIN_TIPO":10,"SENTENCIA_BREAK":11,"SENTENCIA_CONTINUE":12,"SENTENCIA_RETURN":13,"SENTENCIA_IF":14,"SENTENCIA_SWITCH":15,"SENTENCIA_WHILE":16,"SENTENCIA_DO_WHILE":17,"SENTENCIA_FOR":18,"CONSOLE":19,"LLAMADA_FUNCION":20,"SENTENCIA_FUNCIONES":21,"PR_LET":22,"ID":23,":":24,"TIPO":25,"=":26,"EXPRESION":27,";":28,"ARREGLO":29,"PR_CONST":30,".":31,"PR_TYPE":32,"{":33,"DATOS_PRIMITIVOS":34,"}":35,",":36,"DATO_PRIMITIVO":37,"PR_STRING":38,"PR_NUMBER":39,"PR_BOOLEAN":40,"[":41,"]":42,"+":43,"-":44,"*":45,"/":46,"%":47,"^":48,"<":49,">":50,"==":51,"!=":52,"&&":53,"||":54,"!":55,"LLAMADA_FUNCION2":56,"IDENTIFICADOR":57,"EXPRESION_JSON":58,"(":59,")":60,"CADENA":61,"NUMERO":62,"DECIMAL":63,"PR_TRUE":64,"PR_FALSE":65,"PR_NULL":66,"OBJETOS":67,"OBJECT":68,"PR_BREAK":69,"PR_CONTINUE":70,"PR_RETURN":71,"PR_IF":72,"SENTENCIA":73,"ELSEIF":74,"PR_ELSE":75,"PR_WHILE":76,"PR_DO":77,"PR_SWITCH":78,"CASES":79,"DEFAULT":80,"CASE":81,"PR_CASE":82,"PR_DEFAULT":83,"PR_FOR":84,"FOREXP":85,"TIPOFOR":86,"PR_VAR":87,"DECLARACION_FOR":88,"PR_OF":89,"PR_IN":90,"PR_CONSOLE":91,"PR_LOG":92,"PR_FUNCTION":93,"PARAMETROS":94,"SENTENCIA_FUNCION":95,"FUNCIONHIJA":96,"FUNCION_HIJA":97,"OTRA_INSTRUCCION":98,"PARAMETRO":99,"PARAMETROS_LLAMADA":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"PR_LET",23:"ID",24:":",26:"=",28:";",30:"PR_CONST",31:".",32:"PR_TYPE",33:"{",35:"}",36:",",38:"PR_STRING",39:"PR_NUMBER",40:"PR_BOOLEAN",41:"[",42:"]",43:"+",44:"-",45:"*",46:"/",47:"%",48:"^",49:"<",50:">",51:"==",52:"!=",53:"&&",54:"||",55:"!",59:"(",60:")",61:"CADENA",62:"NUMERO",63:"DECIMAL",64:"PR_TRUE",65:"PR_FALSE",66:"PR_NULL",69:"PR_BREAK",70:"PR_CONTINUE",71:"PR_RETURN",72:"PR_IF",75:"PR_ELSE",76:"PR_WHILE",77:"PR_DO",78:"PR_SWITCH",82:"PR_CASE",83:"PR_DEFAULT",84:"PR_FOR",87:"PR_VAR",89:"PR_OF",90:"PR_IN",91:"PR_CONSOLE",92:"PR_LOG",93:"PR_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,8],[7,6],[7,6],[7,4],[8,7],[8,5],[10,6],[10,7],[10,4],[10,6],[10,2],[9,7],[34,3],[34,1],[37,3],[25,1],[25,1],[25,1],[25,1],[29,2],[29,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,2],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,1],[27,1],[27,1],[57,3],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,3],[57,5],[58,3],[67,3],[67,1],[68,3],[11,2],[12,2],[13,2],[13,3],[14,6],[73,3],[73,2],[74,2],[74,2],[74,0],[16,5],[17,7],[15,8],[79,2],[79,1],[81,4],[80,3],[80,0],[18,5],[85,4],[85,4],[85,4],[85,5],[86,1],[86,1],[88,6],[88,4],[88,6],[88,4],[19,7],[21,7],[21,5],[21,8],[21,6],[95,3],[95,2],[96,2],[97,5],[97,6],[98,2],[98,0],[94,3],[94,1],[99,3],[20,4],[20,5],[56,3],[56,4],[100,3],[100,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = { node: nodoAST(yy, yystate, $$[$0-1].node) };
        return this.$;
    
break;
case 2:

        this.$ = { node: nodoAST(yy, yystate, $$[$0-1].node, $$[$0].node) };
    
break;
case 3:

        this.$ = { node: nodoAST(yy, yystate, $$[$0].node)};
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 37: case 65: case 66: case 79: case 95: case 130:

        this.$ = {node: nodoAST(yy, yystate, $$[$0].node)};
    
break;
case 19:
 
        this.$ = $$[$0]
    
break;
case 20: case 28:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 21: case 22: case 29:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 23: case 127:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 24:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 25:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 26: case 30:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 27: case 32: case 101: case 102: case 128:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 31:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 33:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 34:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-1].node)};
    
break;
case 35:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 36: case 45: case 46: case 47: case 48: case 49: case 50: case 53: case 54: case 57: case 58: case 59: case 60: case 78: case 129:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 38: case 80: case 97:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 39: case 104:

        this.$ = {node: nodoAST(yy, yystate, $$[$0])};
    
break;
case 40: case 41: case 42: case 105:
 
        this.$ = {node: nodoAST(yy, yystate, $$[$0])};
    
break;
case 43: case 81: case 82: case 83: case 87:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 44:
 
        this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 51:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-3].node, "**", $$[$0].node)};
    
break;
case 52:

        this.$ = {node: nodoAST(yy, yystate, "-", $$[$0].node)};
    
break;
case 55: case 56:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-3].node, "<=", $$[$0].node)};
    
break;
case 61: case 88: case 89:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-1], $$[$0].node)};
    
break;
case 62: case 63:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 64:

        this.$ = $$[$0]
    
break;
case 67: case 77: case 84: case 86:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 68: case 69: case 70: case 71: case 72: case 74:
 
        this.$ = {
            node: nodoAST(yy, yystate, $$[$0])
        };
    
break;
case 73:
 
        this.$ = { node: nodoAST(yy, yystate, $$[$0])};
    
break;
case 75:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])
        };
    
break;
case 76:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2],$$[$0-1], $$[$0])
        };
    
break;
case 85:

        if($$[$0] == undefined) {
            this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node)};
        } else {
            this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0].node)};
        }
    
break;
case 90: case 98:

        this.$ = null;
    
break;
case 91: case 99:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 92:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 93:

        if($$[$0-1] == undefined) {
            this.$ = {node: nodoAST(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0])};
        } else {
            this.$ = {node: nodoAST(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
        }
    
break;
case 94:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-1].node, $$[$0].node)};
    
break;
case 96:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 100:

       this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 103:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 106: case 108:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 107: case 109:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 110:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])
        };
    
break;
case 111:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0].node)
        };
    
break;
case 112:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)
        };
    
break;
case 113:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0].node)
        };
    
break;
case 114:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)
        };
    
break;
case 115:

        this.$ = $$[$0-2];
    
break;
case 116: case 117: case 120:

        this.$ = $$[$0-1];
    
break;
case 118:

        this.$ = $$[$0-4];
    
break;
case 119:

        this.$ = $$[$0-5];
    
break;
case 121:

        this.$ = $$[$0];
    
break;
case 122:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)
        };
    
break;
case 123:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0].node)
        };
    
break;
case 124:

        this.$ = {
            node: nodoAST(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)
        };
    
break;
case 125:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 126:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo},{1:[3]},{2:$V0,5:[1,48],6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),o($Vp,[2,19]),{23:[1,50]},{23:[1,51]},{23:[1,52]},o($Vq,$Vr,{24:[1,53],26:[1,54],31:[1,55],59:[1,56]}),{28:[1,57],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{28:[1,70]},{28:[1,71]},{23:$VE,27:73,28:[1,72],33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{59:[1,75]},{59:[1,76]},{59:[1,77]},{33:$VF,73:78},{59:[1,80]},{31:[1,81]},{23:[1,82]},{23:$VE,27:83,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:84,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($VG,[2,64]),o($VG,[2,65]),o($VG,[2,66]),{23:$VE,27:85,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($VG,[2,68]),o($VG,[2,69]),o($VG,[2,70]),o($VG,[2,71]),o($VG,[2,72]),o($VG,[2,73]),{23:$VH,67:86,68:87},{1:[2,1]},o($Vp,[2,2]),{24:[1,89],26:[1,90],28:[1,91],29:92,41:$VI},{24:[1,94],26:[1,95]},{26:[1,96]},{23:$VJ,25:97,38:$VK,39:$VL,40:$VM},{23:$VE,27:102,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:[1,103]},{23:$VE,27:106,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,60:[1,104],61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,100:105},o($Vp,[2,34]),{23:$VE,27:107,33:$V5,43:[1,108],44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:109,33:$V5,44:[1,110],55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:111,33:$V5,44:$V6,45:[1,112],55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:113,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:114,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:115,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,26:[1,117],27:116,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,26:[1,119],27:118,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:120,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:121,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:122,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:123,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($Vp,[2,81]),o($Vp,[2,82]),o($Vp,[2,83]),{28:[1,124],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},o($VG,$Vr,{31:[1,126],59:[1,125]}),{23:$VE,27:127,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:128,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:129,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{76:[1,130]},{2:$V0,4:131,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,35:[1,132],44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo},{22:[1,134],30:[1,136],85:133,87:[1,135],88:137},{92:[1,138]},{59:[1,139]},o($VN,[2,52],{45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VG,[2,61]),{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,60:[1,140]},{35:[1,141],36:[1,142]},o($VO,[2,79]),{24:[1,143]},{23:$VJ,25:144,38:$VK,39:$VL,40:$VM},{23:$VE,27:145,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($Vp,[2,23]),{26:[1,146],28:[1,147]},{42:[1,148]},{23:$VJ,25:149,38:$VK,39:$VL,40:$VM},{23:$VE,27:150,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{33:[1,151]},{26:[1,152],29:153,41:$VI},o($VP,[2,39]),o($VP,[2,40]),o($VP,[2,41]),o($VP,[2,42]),{28:[1,154],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},o($Vq,$VQ,{26:[1,155],31:$VR}),o($VS,$VT,{28:[1,157]}),{36:$VU,60:[1,158]},o($VV,[2,130],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o($VN,[2,45],{45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VG,[2,62]),o($VN,[2,46],{45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VG,[2,63],{56:37,57:38,58:39,27:83,23:$VE,33:$V5,55:$V7,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve}),o($VW,[2,47],{47:$Vw,48:$Vx}),{23:$VE,27:160,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($VW,[2,48],{47:$Vw,48:$Vx}),o($VG,[2,49]),o($VG,[2,50]),o($VX,[2,53],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),{23:$VE,27:161,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($VX,[2,54],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),{23:$VE,27:162,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($VY,[2,57],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o($VY,[2,58],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz}),o([24,28,35,36,53,54,60],[2,59],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB}),o([24,28,35,36,54,60],[2,60],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC}),o($Vp,[2,84]),{23:$VE,27:106,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,60:[1,163],61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,100:164},{23:[1,165]},{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,60:[1,166]},{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,60:[1,167]},{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,60:[1,168]},{59:[1,169]},{2:$V0,6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,35:[1,170],44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo},o($VZ,[2,87]),{60:[1,171]},{23:[1,172]},{23:[1,173]},{23:[1,174]},{28:[1,175]},{59:[1,176]},{23:$V_,60:[1,177],94:178,99:179},o($VG,[2,67]),o($VG,[2,77]),{23:$VH,68:181},{23:$VE,27:182,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{26:[1,183],28:[1,184],29:185,41:$VI},{28:[1,186],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{23:$VE,27:187,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($Vp,[2,27]),o($V$,[2,43],{41:[1,188]}),{26:[1,189]},{28:[1,190],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{23:$V01,34:191,37:192},{23:$VE,27:194,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{26:[1,195]},o($Vp,[2,32]),{23:$VE,27:196,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:[1,197]},o($Vp,[2,125]),o($VS,$V11,{28:[1,198]}),{23:$VE,27:199,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($VW,[2,51],{47:$Vw,48:$Vx}),o($VX,[2,55],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VX,[2,56],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx}),o($VG,$VT),{36:$VU,60:[1,200]},o($VG,$VQ,{31:$VR}),{33:$VF,73:201},{33:[1,202]},{33:$VF,73:203},{23:$VE,27:204,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($VZ,[2,86]),{33:$VF,73:205},{24:[1,207],26:[1,208],86:206,89:$V21,90:$V31},{24:[1,212],26:[1,213],86:211,89:$V21,90:$V31},{86:214,89:$V21,90:$V31},{23:$VE,27:215,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:216,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{24:[1,217],33:$VF,73:218},{36:[1,220],60:[1,219]},o($VV,[2,123]),{24:[1,221]},o($VO,[2,78]),o($VO,[2,80],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),{23:$VE,27:222,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($Vp,[2,21]),{26:[1,223],28:[1,224]},o($Vp,[2,22]),{28:[1,225],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{42:[1,226]},{23:$VE,27:227,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($Vp,[2,29]),{35:[1,228],36:[1,229]},o($VO,[2,37]),{24:[1,230]},{28:[1,231],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{23:$VE,27:232,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{28:[1,233],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},o($VG,[2,76]),o($Vp,[2,126]),o($VV,[2,129],{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD}),o($VG,$V11),o($Vp,[2,90],{74:234,75:[1,235]}),{79:236,81:237,82:$V41},o($Vp,[2,91]),{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,60:[1,239]},o($Vp,[2,99]),{23:[1,240]},{23:$VJ,25:241,38:$VK,39:$VL,40:$VM},{23:$VE,27:242,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:[2,104]},{23:[2,105]},{23:[1,243]},{23:$VJ,25:244,38:$VK,39:$VL,40:$VM},{23:$VE,27:245,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:[1,246]},{28:[1,247],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,60:[1,248]},{23:$VJ,25:249,38:$VK,39:$VL,40:$VM},o($Vp,[2,112]),{24:[1,250],33:$VF,73:251},{23:$V_,99:252},{23:$VJ,25:253,38:$VK,39:$VL,40:$VM},{28:[1,254],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{23:$VE,27:255,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},o($Vp,[2,25]),o($Vp,[2,26]),o($V$,[2,44]),{28:[1,256],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{28:[1,257]},{23:$V01,37:258},{23:$VJ,25:259,38:$VK,39:$VL,40:$VM},o($Vp,[2,30]),{28:[1,260],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},o($Vp,[2,33]),o($Vp,[2,85]),{14:262,33:$VF,72:$Vi,73:261},{35:[2,98],80:263,81:264,82:$V41,83:[1,265]},o($V51,[2,95]),{23:$VE,27:266,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{28:[1,267]},{60:[2,100]},{26:[1,268]},{28:[2,109],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{60:[2,101]},{26:[1,269]},{28:[2,107],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{60:[2,102]},{23:$VE,27:270,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{28:[1,271]},{33:$VF,73:272},{23:$VJ,25:273,38:$VK,39:$VL,40:$VM},o($Vp,[2,114]),o($VV,[2,122]),o($VV,[2,124]),o($Vp,[2,20]),{28:[1,274],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},o($Vp,[2,28]),o($Vp,[2,35]),o($VO,[2,36]),o($VO,[2,38]),o($Vp,[2,31]),o($Vp,[2,88]),o($Vp,[2,89]),{35:[1,275]},o($V51,[2,94]),{24:[1,276]},{24:[1,277],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},o($Vp,[2,92]),{23:$VE,27:278,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{23:$VE,27:279,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve},{43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,60:[2,103]},o($Vp,[2,110]),o($Vp,[2,111]),{33:$VF,73:280},o($Vp,[2,24]),o($Vp,[2,93]),{2:$V0,4:281,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo},{2:$V0,4:282,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo},{28:[2,108],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},{28:[2,106],43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD},o($Vp,[2,113]),{2:$V0,6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,35:[2,97],44:$V6,55:$V7,56:37,57:38,58:39,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo},o($V51,[2,96],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,27:24,56:37,57:38,58:39,6:49,2:$V0,22:$V1,23:$V2,30:$V3,32:$V4,33:$V5,44:$V6,55:$V7,59:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,76:$Vj,77:$Vk,78:$Vl,84:$Vm,91:$Vn,93:$Vo})],
defaultActions: {48:[2,1],209:[2,104],210:[2,105],240:[2,100],243:[2,101],246:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Acceso } = require('../expresion/acceso.expresion');
    const { Literal } = require('../expresion/literal.expresion');
    const { Declaracion } = require('../instruccion/declaracion.instruccion');
    const { Imprimir } = require('../instruccion/console.instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 63
break;
case 4:return 62
break;
case 5:return 61
break;
case 6:return 61
break;
case 7:return 61
break;
case 8:return 45
break;
case 9:return 46
break;
case 10:return 44
break;
case 11:return 43
break;
case 12:return 47
break;
case 13:return 48
break;
case 14:return 28
break;
case 15:return 24
break;
case 16:return 36
break;
case 17:return 31
break;
case 18:return 49
break;
case 19:return 50
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 51
break;
case 23:return 52
break;
case 24:return 54
break;
case 25:return 53
break;
case 26:return 55
break;
case 27:return 26
break;
case 28:return 59
break;
case 29:return 60 
break;
case 30:return 33
break;
case 31:return 35
break;
case 32:return 41
break;
case 33:return 42
break;
case 34:return 35
break;
case 35:return 35
break;
case 36:return 22
break;
case 37:return 87
break;
case 38:return 30
break;
case 39:return 72
break;
case 40:return 75
break;
case 41:return 78
break;
case 42:return 83
break;
case 43:return 82
break;
case 44:return 76
break;
case 45:return 77
break;
case 46:return 84
break;
case 47:return 91
break;
case 48:return 92
break;
case 49:return 69
break;
case 50:return 70
break;
case 51:return 71
break;
case 52:return 93
break;
case 53:return 38
break;
case 54:return 39
break;
case 55:return 40
break;
case 56:return 64
break;
case 57:return 65
break;
case 58:return 89
break;
case 59:return 90
break;
case 60:return 32
break;
case 61:return 66
break;
case 62:return 'PR_UNDEFINED'
break;
case 63:return 23;
break;
case 64:return 5;
break;
case 65:return 'ERRORS'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:type\b)/i,/^(?:null\b)/i,/^(?:undefined\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}