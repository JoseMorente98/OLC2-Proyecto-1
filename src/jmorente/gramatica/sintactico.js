/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sintactico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,23],$V3=[1,21],$V4=[1,22],$V5=[1,47],$V6=[1,35],$V7=[1,36],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,30],$Vk=[1,31],$Vl=[1,29],$Vm=[1,32],$Vn=[1,33],$Vo=[1,34],$Vp=[2,5,22,23,30,32,33,35,45,56,60,62,63,64,65,66,67,70,71,72,73,77,78,79,83,84,85,92,94],$Vq=[28,44,45,46,47,48,49,50,51,52,53,54,55],$Vr=[2,78],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,74],$VF=[1,79],$VG=[24,28,35,36,44,45,46,47,48,49,50,51,52,53,54,55,61],$VH=[1,88],$VI=[1,93],$VJ=[1,101],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[24,28,35,36,44,45,50,51,52,53,54,55,61],$VO=[35,36],$VP=[26,28,33,36,42,61],$VQ=[2,79],$VR=[1,153],$VS=[44,45,46,47,48,49,50,51,52,53,54,55],$VT=[2,129],$VU=[1,156],$VV=[36,61],$VW=[24,28,35,36,44,45,46,47,50,51,52,53,54,55,61],$VX=[24,28,35,36,50,51,52,53,54,55,61],$VY=[24,28,35,36,52,53,54,55,61],$VZ=[2,5,22,23,30,32,33,35,45,56,60,62,63,64,65,66,67,70,71,72,73,76,77,78,79,83,84,85,92,94],$V_=[1,174],$V$=[26,28],$V01=[1,187],$V11=[2,130],$V21=[1,224],$V31=[35,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_LET":7,"DECLARACION_CONST":8,"DECLARACION_TYPE":9,"DECLARACION_SIN_TIPO":10,"SENTENCIA_BREAK":11,"SENTENCIA_CONTINUE":12,"SENTENCIA_RETURN":13,"SENTENCIA_IF":14,"SENTENCIA_SWITCH":15,"SENTENCIA_WHILE":16,"SENTENCIA_DO_WHILE":17,"SENTENCIA_FOR":18,"CONSOLE":19,"LLAMADA_FUNCION":20,"SENTENCIA_FUNCIONES":21,"PR_LET":22,"ID":23,":":24,"TIPO":25,"=":26,"EXPRESION":27,";":28,"ARREGLO":29,"PR_CONST":30,".":31,"PR_TYPE":32,"{":33,"DATOS_PRIMITIVOS":34,"}":35,",":36,"DATO_PRIMITIVO":37,"TIPO_TYPE":38,"PR_NUMBER":39,"PR_STRING":40,"PR_BOOLEAN":41,"[":42,"]":43,"+":44,"-":45,"*":46,"/":47,"%":48,"^":49,"<":50,">":51,"==":52,"!=":53,"&&":54,"||":55,"!":56,"LLAMADA_FUNCION2":57,"IDENTIFICADOR":58,"EXPRESION_JSON":59,"(":60,")":61,"CADENA":62,"NUMERO":63,"DECIMAL":64,"PR_TRUE":65,"PR_FALSE":66,"PR_NULL":67,"OBJETOS":68,"OBJECT":69,"PR_BREAK":70,"PR_CONTINUE":71,"PR_RETURN":72,"PR_IF":73,"SENTENCIA":74,"ELSEIF":75,"PR_ELSE":76,"PR_WHILE":77,"PR_DO":78,"PR_SWITCH":79,"CASES":80,"DEFAULT":81,"CASE":82,"PR_CASE":83,"PR_DEFAULT":84,"PR_FOR":85,"DECLARACION_FOR":86,"FOREXP":87,"TIPOFOR":88,"PR_VAR":89,"PR_OF":90,"PR_IN":91,"PR_CONSOLE":92,"PR_LOG":93,"PR_FUNCTION":94,"PARAMETROS":95,"SENTENCIA_FUNCION":96,"FUNCIONHIJA":97,"FUNCION_HIJA":98,"OTRA_INSTRUCCION":99,"PARAMETRO":100,"PARAMETROS_LLAMADA":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"PR_LET",23:"ID",24:":",26:"=",28:";",30:"PR_CONST",31:".",32:"PR_TYPE",33:"{",35:"}",36:",",39:"PR_NUMBER",40:"PR_STRING",41:"PR_BOOLEAN",42:"[",43:"]",44:"+",45:"-",46:"*",47:"/",48:"%",49:"^",50:"<",51:">",52:"==",53:"!=",54:"&&",55:"||",56:"!",60:"(",61:")",62:"CADENA",63:"NUMERO",64:"DECIMAL",65:"PR_TRUE",66:"PR_FALSE",67:"PR_NULL",70:"PR_BREAK",71:"PR_CONTINUE",72:"PR_RETURN",73:"PR_IF",76:"PR_ELSE",77:"PR_WHILE",78:"PR_DO",79:"PR_SWITCH",83:"PR_CASE",84:"PR_DEFAULT",85:"PR_FOR",89:"PR_VAR",90:"PR_OF",91:"PR_IN",92:"PR_CONSOLE",93:"PR_LOG",94:"PR_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,8],[7,6],[7,6],[7,4],[8,7],[8,5],[10,6],[10,7],[10,4],[10,6],[10,2],[9,7],[34,3],[34,1],[37,3],[38,1],[38,1],[38,1],[38,1],[25,1],[25,1],[25,1],[25,1],[29,2],[29,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,2],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,1],[27,1],[27,1],[58,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,3],[58,5],[59,3],[68,3],[68,1],[69,3],[11,2],[12,2],[13,2],[13,3],[14,6],[74,3],[74,2],[75,2],[75,2],[75,0],[16,5],[17,7],[15,8],[80,2],[80,1],[82,4],[81,3],[81,0],[18,9],[87,4],[87,4],[87,4],[87,5],[88,1],[88,1],[86,6],[86,4],[19,7],[21,5],[21,7],[21,6],[21,8],[96,3],[96,2],[97,2],[98,5],[98,6],[99,2],[99,0],[95,3],[95,1],[100,3],[20,4],[20,5],[57,3],[57,4],[101,3],[101,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 83: case 99: case 132:

        this.$ = [$$[$0]]
    
break;
case 4: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 68: case 69: case 70:

        this.$ = $$[$0]
    
break;
case 5:

        this.$ = {node: nodoAST(yy, yystate, $$[$0].node)};
    
break;
case 18: case 40: case 92: case 93: case 123:

        this.$ = $$[$0];
    
break;
case 19:
 
        console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
    
break;
case 20: case 28:

        this.$ = new Declaracion($$[$0-5], $$[$0-3].type, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3].tipo);
    
break;
case 21:

        this.$ = new Declaracion($$[$0-3], $$[$0-1].type, null, _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1].tipo);
    
break;
case 22: case 29:

        this.$ = new Declaracion($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 23:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 24:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 25:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 26:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 27: case 105: case 106:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 30:

        this.$ = new Declaracion($$[$0-5], $$[$0-3].type, $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3].tipo);
    
break;
case 31:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 32:

        this.$ = new SinTipo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 33:

        this.$ = new SinTipoType($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 34:

        this.$ = $$[$0-1]
    
break;
case 35:

        this.$ = new Types($$[$0-5], 3, $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 36:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2];
    
break;
case 37: case 125:

        this.$ = [$$[$0]];
    
break;
case 38:

        this.$ = new TypePrimitivo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 39: case 41: case 42:
 
        this.$ = $$[$0];
    
break;
case 43:
 
        this.$ = {type: 0, tipo: $$[$0]};
    
break;
case 44:

        this.$ = {type: 1, tipo: $$[$0]};
    
break;
case 45:
 
        this.$ = {type: 2, tipo: $$[$0]};
    
break;
case 46:
 
        this.$ = {type: 3, tipo: $$[$0]};
    
break;
case 47:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 48:
 
        this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 49:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 51:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.MULTIPLICACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 52:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 54:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.EXPONENTE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 55:

        this.$ = new Aritmetica($$[$0-3], $$[$0], OpcionAritmetica.EXPONENTE, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 56:

        this.$ = new Aritmetica($$[$0], $$[$0], OpcionAritmetica.NEGATIVO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 57:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYOR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 59:

        this.$ = new Relacional($$[$0-3], $$[$0], OpcionRelacional.MENOR_IGUAL, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 60:

        this.$ = new Relacional($$[$0-3], $$[$0], OpcionRelacional.MAYOR_IGUAL, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 61:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.IGUAL, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 62:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.DIFERENTE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Logica($$[$0-2], $$[$0], OpcionLogica.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Logica($$[$0-2], $$[$0], OpcionLogica.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Logica($$[$0], $$[$0], OpcionLogica.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 66:

        this.$ = new Aritmetica($$[$0-2], $$[$0-2], OpcionAritmetica.INCREMENTO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 67:

        this.$ = new Aritmetica($$[$0-2], $$[$0-2], OpcionAritmetica.DECREMENTO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 71: case 91: case 118: case 119: case 122:

        this.$ = $$[$0-1];
    
break;
case 72:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 73: case 74:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 75: case 76:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 77:
 
        this.$ = new Nullable(_$[$0].first_line, _$[$0].first_column, 4)
    
break;
case 78:
 
        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 79:

        this.$ = new AccesoType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 80:

        this.$ = new AccesoType3($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)
    
break;
case 81:

        this.$ = new LiteralObjeto($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 82:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 84:

        this.$ = new Value($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 85:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 86:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 87:

        this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 88:

        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 89:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 90:

        this.$ = new Sentencia($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 94: case 102:

        this.$ = null;
    
break;
case 95:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 96:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 97:

        this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 98:

        this.$ = $$[$0-1].push($$[$0])
        this.$ = $$[$0-1]
    
break;
case 100:

        this.$ = new Case($$[$0-2], new Sentencia($$[$0], _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 101:

        this.$ = new Default(new Sentencia($$[$0], _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 103:

        this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 104:

       this.$ = {node: nodoAST(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 107:

        this.$ = {node: nodoAST(yy, yystate, $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 108:

        this.$ = {node: nodoAST(yy, yystate, $$[$0])};
    
break;
case 109:
 
        this.$ = {node: nodoAST(yy, yystate, $$[$0])};
    
break;
case 110:

        this.$ = new Declaracion($$[$0-4], $$[$0-2].type, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 111:

        this.$ = new Declaracion($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 112:

        this.$ =  new Imprimir($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 113:

        this.$ = new Funcion($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 114:

        this.$ = new Funcion($$[$0-5], $$[$0], [], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 115:

        this.$ = new Funcion($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 116:

        this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 117: case 126:

        this.$ = $$[$0-2];
    
break;
case 120:

        this.$ = $$[$0-4];
    
break;
case 121:

        this.$ = $$[$0-5];
    
break;
case 124: case 131:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 127:

        this.$ = new LlamarFuncion($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 128:

        this.$ = new LlamarFuncion($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 129:

        this.$ = new LlamarFuncion2($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 130:

        this.$ = new LlamarFuncion2($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo},{1:[3]},{2:$V0,5:[1,48],6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),o($Vp,[2,19]),{23:[1,50]},{23:[1,51]},{23:[1,52]},o($Vq,$Vr,{24:[1,53],26:[1,54],31:[1,55],60:[1,56]}),{28:[1,57],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{28:[1,70]},{28:[1,71]},{23:$VE,27:73,28:[1,72],33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{60:[1,75]},{60:[1,76]},{60:[1,77]},{33:$VF,74:78},{60:[1,80]},{31:[1,81]},{23:[1,82]},{23:$VE,27:83,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:84,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($VG,[2,68]),o($VG,[2,69]),o($VG,[2,70]),{23:$VE,27:85,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($VG,[2,72]),o($VG,[2,73]),o($VG,[2,74]),o($VG,[2,75]),o($VG,[2,76]),o($VG,[2,77]),{23:$VH,68:86,69:87},{1:[2,1]},o($Vp,[2,2]),{24:[1,89],26:[1,90],28:[1,91],29:92,42:$VI},{24:[1,94],26:[1,95]},{26:[1,96]},{23:$VJ,25:97,39:$VK,40:$VL,41:$VM},{23:$VE,27:102,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:[1,103]},{23:$VE,27:106,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,61:[1,104],62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,101:105},o($Vp,[2,34]),{23:$VE,27:107,33:$V5,44:[1,108],45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:109,33:$V5,45:[1,110],56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:111,33:$V5,45:$V6,46:[1,112],56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:113,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:114,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:115,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,26:[1,117],27:116,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,26:[1,119],27:118,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:120,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:121,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:122,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:123,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vp,[2,85]),o($Vp,[2,86]),o($Vp,[2,87]),{28:[1,124],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},o($VG,$Vr,{31:[1,126],60:[1,125]}),{23:$VE,27:127,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:128,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:$VE,27:129,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{77:[1,130]},{2:$V0,4:131,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,35:[1,132],45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo},{22:[1,134],86:133},{93:[1,135]},{60:[1,136]},o($VN,[2,56],{46:$Vu,47:$Vv,48:$Vw,49:$Vx}),o($VG,[2,65]),{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,61:[1,137]},{35:[1,138],36:[1,139]},o($VO,[2,83]),{24:[1,140]},{23:$VJ,25:141,39:$VK,40:$VL,41:$VM},{23:$VE,27:142,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vp,[2,23]),{26:[1,143],28:[1,144]},{43:[1,145]},{23:$VJ,25:146,39:$VK,40:$VL,41:$VM},{23:$VE,27:147,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{33:[1,148]},{26:[1,149],29:150,42:$VI},o($VP,[2,43]),o($VP,[2,44]),o($VP,[2,45]),o($VP,[2,46]),{28:[1,151],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},o($Vq,$VQ,{26:[1,152],31:$VR}),o($VS,$VT,{28:[1,154]}),{36:$VU,61:[1,155]},o($VV,[2,132],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD}),o($VN,[2,49],{46:$Vu,47:$Vv,48:$Vw,49:$Vx}),o($VG,[2,66]),o($VN,[2,50],{46:$Vu,47:$Vv,48:$Vw,49:$Vx}),o($VG,[2,67],{57:37,58:38,59:39,27:83,23:$VE,33:$V5,56:$V7,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve}),o($VW,[2,51],{48:$Vw,49:$Vx}),{23:$VE,27:157,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($VW,[2,52],{48:$Vw,49:$Vx}),o($VG,[2,53]),o($VG,[2,54]),o($VX,[2,57],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx}),{23:$VE,27:158,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($VX,[2,58],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx}),{23:$VE,27:159,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($VY,[2,61],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VY,[2,62],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o([24,28,35,36,54,55,61],[2,63],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB}),o([24,28,35,36,55,61],[2,64],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC}),o($Vp,[2,88]),{23:$VE,27:106,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,61:[1,160],62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,101:161},{23:[1,162]},{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,61:[1,163]},{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,61:[1,164]},{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,61:[1,165]},{60:[1,166]},{2:$V0,6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,35:[1,167],45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo},o($VZ,[2,91]),{28:[1,168]},{23:[1,169]},{60:[1,170]},{23:$V_,61:[1,171],95:172,100:173},o($VG,[2,71]),o($VG,[2,81]),{23:$VH,69:175},{23:$VE,27:176,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{26:[1,177],28:[1,178],29:179,42:$VI},{28:[1,180],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{23:$VE,27:181,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vp,[2,27]),o($V$,[2,47],{42:[1,182]}),{26:[1,183]},{28:[1,184],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{23:$V01,34:185,37:186},{23:$VE,27:188,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{26:[1,189]},o($Vp,[2,32]),{23:$VE,27:190,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{23:[1,191]},o($Vp,[2,127]),o($VS,$V11,{28:[1,192]}),{23:$VE,27:193,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($VW,[2,55],{48:$Vw,49:$Vx}),o($VX,[2,59],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx}),o($VX,[2,60],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx}),o($VG,$VT),{36:$VU,61:[1,194]},o($VG,$VQ,{31:$VR}),{33:$VF,74:195},{33:[1,196]},{33:$VF,74:197},{23:$VE,27:198,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($VZ,[2,90]),{23:$VE,27:199,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{24:[1,200],26:[1,201]},{23:$VE,27:202,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{24:[1,204],33:$VF,74:203},{36:[1,206],61:[1,205]},o($VV,[2,125]),{24:[1,207]},o($VO,[2,82]),o($VO,[2,84],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD}),{23:$VE,27:208,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vp,[2,21]),{26:[1,209],28:[1,210]},o($Vp,[2,22]),{28:[1,211],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{43:[1,212]},{23:$VE,27:213,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vp,[2,29]),{35:[1,214],36:[1,215]},o($VO,[2,37]),{24:[1,216]},{28:[1,217],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{23:$VE,27:218,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{28:[1,219],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},o($VG,[2,80]),o($Vp,[2,128]),o($VV,[2,131],{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD}),o($VG,$V11),o($Vp,[2,94],{75:220,76:[1,221]}),{80:222,82:223,83:$V21},o($Vp,[2,95]),{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,61:[1,225]},{28:[1,226],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{23:$VJ,25:227,39:$VK,40:$VL,41:$VM},{23:$VE,27:228,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,61:[1,229]},o($Vp,[2,113]),{23:$VJ,25:230,39:$VK,40:$VL,41:$VM},{24:[1,232],33:$VF,74:231},{23:$V_,100:233},{23:$VJ,25:234,39:$VK,40:$VL,41:$VM},{28:[1,235],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{23:$VE,27:236,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vp,[2,25]),o($Vp,[2,26]),o($V$,[2,48]),{28:[1,237],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{28:[1,238]},{23:$V01,37:239},{23:[1,244],38:240,39:[1,241],40:[1,242],41:[1,243]},o($Vp,[2,30]),{28:[1,245],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},o($Vp,[2,33]),o($Vp,[2,89]),{14:247,33:$VF,73:$Vi,74:246},{35:[2,102],81:248,82:249,83:$V21,84:[1,250]},o($V31,[2,99]),{23:$VE,27:251,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{28:[1,252]},{23:$VE,27:253,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{26:[1,254]},{28:[2,111],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},{28:[1,255]},{33:$VF,74:256},o($Vp,[2,115]),{23:$VJ,25:257,39:$VK,40:$VL,41:$VM},o($VV,[2,124]),o($VV,[2,126]),o($Vp,[2,20]),{28:[1,258],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},o($Vp,[2,28]),o($Vp,[2,35]),o($VO,[2,36]),o($VO,[2,38]),o($VO,[2,39]),o($VO,[2,40]),o($VO,[2,41]),o($VO,[2,42]),o($Vp,[2,31]),o($Vp,[2,92]),o($Vp,[2,93]),{35:[1,259]},o($V31,[2,98]),{24:[1,260]},{24:[1,261],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},o($Vp,[2,96]),{44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,61:[1,262]},{23:$VE,27:263,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vp,[2,112]),o($Vp,[2,114]),{33:$VF,74:264},o($Vp,[2,24]),o($Vp,[2,97]),{2:$V0,4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo},{2:$V0,4:266,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo},{33:$VF,74:267},{28:[2,110],44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD},o($Vp,[2,116]),{2:$V0,6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,27:24,30:$V3,32:$V4,33:$V5,35:[2,101],45:$V6,56:$V7,57:37,58:38,59:39,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo},o($V31,[2,100],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,27:24,57:37,58:38,59:39,6:49,2:$V0,22:$V1,23:$V2,30:$V3,32:$V4,33:$V5,45:$V6,56:$V7,60:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,92:$Vn,94:$Vo}),o($Vp,[2,103])],
defaultActions: {48:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Aritmetica, OpcionAritmetica } = require('../expresion/aritmetica.expresion');
    const { Relacional, OpcionRelacional } = require('../expresion/relacional.expresion');
    const { Logica, OpcionLogica } = require('../expresion/logica.expresion');
    const { ErrorAnalisis } = require('../expresion/error.expresion');
    const { ErrorLexico } = require('../expresion/errorl.expresion');
    const { Acceso } = require('../expresion/acceso.expresion');
    const { AccesoType } = require('../expresion/acceso-type.expresion');
    const { AccesoType3 } = require('../expresion/acceso-type3.expresion');
    const { Literal } = require('../expresion/literal.expresion');
    const { Nullable } = require('../expresion/nullable.expresion');
    const { LiteralObjeto } = require('../expresion/literal-objeto.expresion');
    const { Declaracion } = require('../instruccion/declaracion.instruccion');
    const { DeclaracionLlamada } = require('../instruccion/declaracion-llamada.instruccion');
    const { SinTipo } = require('../instruccion/sintipo.instruccion');
    const { SinTipoType } = require('../instruccion/sin-tipo-type.instruccion');
    const { SinTipoLLamada } = require('../instruccion/sin-tipo-type-llamada.instruccion');
    const { SinTipoTypeLlamada } = require('../instruccion/sin-tipo-type.instruccion');
    const { Imprimir } = require('../instruccion/console.instruccion');
    const { While } = require('../instruccion/while.instruccion');
    const { For } = require('../instruccion/for.instruccion');
    const { If } = require('../instruccion/if.instruccion');
    const { DoWhile } = require('../instruccion/do-while.instruccion');
    const { Sentencia } = require('../instruccion/sentencia.instruccion');
    const { Switch } = require('../instruccion/switch.instruccion');
    const { Case } = require('../instruccion/case.instruccion');
    const { Default } = require('../instruccion/default.instruccion');
    const { Return } = require('../instruccion/return.instruccion');
    const { Break } = require('../instruccion/break.instruccion');
    const { Continue } = require('../instruccion/continue.instruccion');
    const { Types } = require('../instruccion/type.instruccion');
    const { TypePrimitivo } = require('../instruccion/type-primitivo.instruccion');
    const { Value } = require('../instruccion/value.instruccion');
    const { Funcion } = require('../instruccion/funcion.instruccion');
    const { LlamarFuncion } = require('../instruccion/llamar.instruccion');
    const { LlamarFuncion2 } = require('../instruccion/llamar2.instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 64
break;
case 4:return 63
break;
case 5:return 62
break;
case 6:return 62
break;
case 7:return 62
break;
case 8:return 46
break;
case 9:return 47
break;
case 10:return 45
break;
case 11:return 44
break;
case 12:return 48
break;
case 13:return 49
break;
case 14:return 28
break;
case 15:return 24
break;
case 16:return 36
break;
case 17:return 31
break;
case 18:return 50
break;
case 19:return 51
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 52
break;
case 23:return 53
break;
case 24:return 55
break;
case 25:return 54
break;
case 26:return 56
break;
case 27:return 26
break;
case 28:return 60
break;
case 29:return 61 
break;
case 30:return 33
break;
case 31:return 35
break;
case 32:return 42
break;
case 33:return 43
break;
case 34:return 35
break;
case 35:return 35
break;
case 36:return 22
break;
case 37:return 89
break;
case 38:return 30
break;
case 39:return 73
break;
case 40:return 76
break;
case 41:return 79
break;
case 42:return 84
break;
case 43:return 83
break;
case 44:return 77
break;
case 45:return 78
break;
case 46:return 85
break;
case 47:return 92
break;
case 48:return 93
break;
case 49:return 70
break;
case 50:return 71
break;
case 51:return 72
break;
case 52:return 94
break;
case 53:return 40
break;
case 54:return 39
break;
case 55:return 41
break;
case 56:return 65
break;
case 57:return 66
break;
case 58:return 90
break;
case 59:return 91
break;
case 60:return 32
break;
case 61:return 67
break;
case 62:return 'PR_UNDEFINED'
break;
case 63:return 23;
break;
case 64:return 5;
break;
case 65: new ErrorLexico(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column) 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:type\b)/i,/^(?:null\b)/i,/^(?:undefined\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_√±√ë]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sintactico;
exports.Parser = sintactico.Parser;
exports.parse = function () { return sintactico.parse.apply(sintactico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}