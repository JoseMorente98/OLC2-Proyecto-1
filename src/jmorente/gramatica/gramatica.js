/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,21],$V2=[1,19],$V3=[1,20],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,27],$V9=[1,28],$Va=[1,26],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[5,21,22,29,30,59,60,61,62,66,68,69,70,74,75,76,82,85],$Vf=[1,51],$Vg=[1,43],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,56],$Vo=[1,64],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[23,27,36,37,38,39,40,41,42,43,44,45,46,47,48,49,53],$VH=[25,27,34,53,91],$VI=[5,21,22,29,30,59,60,61,62,66,67,68,69,70,74,75,76,82,85],$VJ=[1,151],$VK=[25,27],$VL=[23,27,36,37,42,43,44,45,46,47,48,49,53],$VM=[23,27,36,37,38,39,42,43,44,45,46,47,48,49,53],$VN=[23,27,42,43,44,45,46,47,48,49,53],$VO=[23,27,46,47,48,49,53],$VP=[1,175],$VQ=[1,176],$VR=[1,184],$VS=[1,186],$VT=[53,91],$VU=[1,204],$VV=[1,218],$VW=[66,74,75],$VX=[2,107],$VY=[66,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"DECLARACION_LET":8,"DECLARACION_CONST":9,"DECLARACION_SIN_TIPO":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"FUNCIONES":20,"PR_VAR":21,"ID":22,":":23,"TIPO":24,"=":25,"EXPRESION":26,";":27,"ARREGLO":28,"PR_LET":29,"PR_CONST":30,"PR_STRING":31,"PR_NUMBER":32,"PR_BOOLEAN":33,"[":34,"]":35,"+":36,"-":37,"*":38,"/":39,"%":40,"^":41,"<":42,"<=":43,">":44,">=":45,"==":46,"!=":47,"&&":48,"||":49,"!":50,"IDENTIFICADOR":51,"(":52,")":53,"CADENA":54,"NUMERO":55,"DECIMAL":56,"PR_TRUE":57,"PR_FALSE":58,"PR_BREAK":59,"PR_CONTINUE":60,"PR_RETURN":61,"PR_IF":62,"SENTENCIA":63,"ELSEIF":64,"{":65,"}":66,"PR_ELSE":67,"PR_WHILE":68,"PR_DO":69,"PR_SWITCH":70,"CASES":71,"DEFAULT":72,"CASE":73,"PR_CASE":74,"PR_DEFAULT":75,"PR_FOR":76,"FOREXP":77,"TIPOFOR":78,"DECLARACION_FOR":79,"PR_OF":80,"PR_IN":81,"PR_CONSOLE":82,".":83,"PR_LOG":84,"PR_FUNCTION":85,"SENTENCIAFUNCION":86,"PARAMETROS":87,"FUNCIONHIJA":88,"FUNCIONH":89,"OTRAFUNCIONH":90,",":91,"PARAMETRO":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"PR_VAR",22:"ID",23:":",25:"=",27:";",29:"PR_LET",30:"PR_CONST",31:"PR_STRING",32:"PR_NUMBER",33:"PR_BOOLEAN",34:"[",35:"]",36:"+",37:"-",38:"*",39:"/",40:"%",41:"^",42:"<",43:"<=",44:">",45:">=",46:"==",47:"!=",48:"&&",49:"||",50:"!",52:"(",53:")",54:"CADENA",55:"NUMERO",56:"DECIMAL",57:"PR_TRUE",58:"PR_FALSE",59:"PR_BREAK",60:"PR_CONTINUE",61:"PR_RETURN",62:"PR_IF",65:"{",66:"}",67:"PR_ELSE",68:"PR_WHILE",69:"PR_DO",70:"PR_SWITCH",74:"PR_CASE",75:"PR_DEFAULT",76:"PR_FOR",80:"PR_OF",81:"PR_IN",82:"PR_CONSOLE",83:".",84:"PR_LOG",85:"PR_FUNCTION",91:","},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,8],[7,6],[7,6],[7,4],[8,7],[8,5],[8,5],[8,3],[8,8],[8,6],[8,6],[8,4],[9,7],[9,5],[10,6],[10,7],[10,4],[24,1],[24,1],[24,1],[28,2],[28,4],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,1],[51,3],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[11,2],[12,2],[13,2],[13,3],[14,6],[63,3],[63,2],[64,2],[64,2],[64,0],[16,5],[17,7],[15,8],[71,2],[71,1],[73,4],[72,3],[72,0],[18,5],[77,4],[77,4],[77,4],[77,5],[78,1],[78,1],[79,6],[79,4],[79,6],[79,4],[19,7],[20,5],[20,6],[86,3],[86,2],[88,2],[89,5],[89,6],[90,2],[90,0],[87,3],[87,1],[92,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node)};
        return this.$;
    
break;
case 2: case 82:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
    
break;
case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 61: case 83:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 15: case 16: case 17: case 92: case 107: case 109:

        this.$ = $$[$0];
    
break;
case 18: case 26: case 34:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 19: case 20: case 27: case 28: case 35:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 21: case 29:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 22: case 30:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 23: case 31:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 24: case 32: case 36:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 25: case 33: case 38:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 37:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 39:

        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 40: case 41: case 63: case 64: case 65: case 66: case 67: case 68:
 
        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 42: case 69: case 70: case 71: case 75:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 43:
 
        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 58: case 76: case 77:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
    
break;
case 59: case 60:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 62: case 72: case 74:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 73:

        if($$[$0] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node)};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0].node)};
        }
    
break;
case 78: case 86:

        this.$ = null;
    
break;
case 79:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 80:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 81:

        if($$[$0-1] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0])};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
        }
    
break;
case 84:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 85:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 87: case 91: case 99: case 104:

        this.$ = $$[$0-4];
    
break;
case 88: case 89: case 90: case 95: case 97:

        this.$ = $$[$0-3];
    
break;
case 93:
 
        this.$ = $$[$0];
    
break;
case 94: case 96: case 100: case 105:

        this.$ = $$[$0-5];
    
break;
case 98:

        this.$ = $$[$0-6];
    
break;
case 101: case 108: case 110:

        this.$ = $$[$0-2];
    
break;
case 102: case 103: case 106:

        this.$ = $$[$0-1];
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd},{1:[3]},{5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),{22:[1,34]},{22:[1,35]},{22:[1,36]},{23:[1,37],25:[1,38]},{27:[1,39]},{27:[1,40]},{22:$Vf,26:42,27:[1,41],50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{52:[1,52]},{52:[1,53]},{52:[1,54]},{63:55,65:$Vn},{52:[1,57]},{83:[1,58]},{22:[1,59]},{1:[2,1]},o($Ve,[2,2]),{23:[1,60],25:[1,61],27:[1,62],28:63,34:$Vo},{23:[1,65],25:[1,66],27:[1,67],28:68,34:$Vo},{23:[1,69],25:[1,70]},{24:71,31:$Vp,32:$Vq,33:$Vr},{22:$Vf,26:75,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,69]),o($Ve,[2,70]),o($Ve,[2,71]),{27:[1,76],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:91,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VG,[2,61]),{22:$Vf,26:92,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VG,[2,63]),o($VG,[2,64]),o($VG,[2,65]),o($VG,[2,66]),o($VG,[2,67]),o($VG,[2,68]),{22:$Vf,26:93,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:94,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:95,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{68:[1,96]},{4:97,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,66:[1,98],68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd},{21:[1,101],29:[1,100],30:[1,102],77:99,79:103},{84:[1,104]},{52:[1,105]},{24:106,31:$Vp,32:$Vq,33:$Vr},{22:$Vf,26:107,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,21]),{25:[1,108],27:[1,109]},{35:[1,110]},{24:111,31:$Vp,32:$Vq,33:$Vr},{22:$Vf,26:112,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,29]),{25:[1,113],27:[1,114]},{24:115,31:$Vp,32:$Vq,33:$Vr},{22:$Vf,26:116,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{25:[1,117],28:118,34:$Vo},o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),{27:[1,119],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Ve,[2,72]),{22:$Vf,26:120,36:[1,121],50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:122,37:[1,123],50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:124,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:125,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:126,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:127,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:128,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:129,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:130,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:131,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:132,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:133,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:134,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:135,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VG,[2,58]),{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,53:[1,136]},{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,53:[1,137]},{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,53:[1,138]},{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,53:[1,139]},{52:[1,140]},{6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,66:[1,141],68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd},o($VI,[2,75]),{53:[1,142]},{22:[1,143]},{22:[1,144]},{22:[1,145]},{27:[1,146]},{52:[1,147]},{22:$VJ,53:[1,148],87:149,92:150},{25:[1,152],27:[1,153],28:154,34:$Vo},{27:[1,155],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:156,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,25]),o($VK,[2,42],{34:[1,157]}),{25:[1,158],27:[1,159],28:160,34:$Vo},{27:[1,161],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:162,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,33]),{25:[1,163]},{27:[1,164],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:165,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{25:[1,166]},o($Ve,[2,38]),o($VL,[2,44],{38:$Vu,39:$Vv,40:$Vw,41:$Vx}),o($VG,[2,59]),o($VL,[2,45],{38:$Vu,39:$Vv,40:$Vw,41:$Vx}),o($VG,[2,60]),o($VM,[2,46],{40:$Vw,41:$Vx}),o($VM,[2,47],{40:$Vw,41:$Vx}),o($VG,[2,48]),o($VG,[2,49]),o($VN,[2,50],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx}),o($VN,[2,51],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx}),o($VN,[2,52],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx}),o($VN,[2,53],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx}),o($VO,[2,54],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB}),o($VO,[2,55],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB}),o([23,27,48,49,53],[2,56],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD}),o([23,27,49,53],[2,57],{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($VG,[2,62]),{63:167,65:$Vn},{65:[1,168]},{63:169,65:$Vn},{22:$Vf,26:170,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($VI,[2,74]),{63:171,65:$Vn},{23:[1,173],25:[1,174],78:172,80:$VP,81:$VQ},{23:[1,178],25:[1,179],78:177,80:$VP,81:$VQ},{78:180,80:$VP,81:$VQ},{22:$Vf,26:181,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:182,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{65:$VR,86:183},{53:[1,185],91:$VS},o($VT,[2,109]),{23:[1,187]},{22:$Vf,26:188,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,19]),{25:[1,189],27:[1,190]},o($Ve,[2,20]),{27:[1,191],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{35:[1,192]},{22:$Vf,26:193,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,27]),{25:[1,194],27:[1,195]},o($Ve,[2,28]),{27:[1,196],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:197,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,35]),{27:[1,198],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:199,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,78],{64:200,67:[1,201]}),{71:202,73:203,74:$VU},o($Ve,[2,79]),{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,53:[1,205]},o($Ve,[2,87]),{22:[1,206]},{24:207,31:$Vp,32:$Vq,33:$Vr},{22:$Vf,26:208,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:[2,92]},{22:[2,93]},{22:[1,209]},{24:210,31:$Vp,32:$Vq,33:$Vr},{22:$Vf,26:211,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:[1,212]},{27:[1,213],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,53:[1,214]},o($Ve,[2,99]),{66:[1,216],85:$VV,88:215,89:217},{65:$VR,86:219},{22:$VJ,92:220},{24:221,31:$Vp,32:$Vq,33:$Vr},{27:[1,222],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:223,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,23]),o($Ve,[2,24]),o($VK,[2,43]),{27:[1,224],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{22:$Vf,26:225,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},o($Ve,[2,31]),o($Ve,[2,32]),{27:[1,226],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Ve,[2,36]),{27:[1,227],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Ve,[2,73]),{14:229,62:$V7,63:228,65:$Vn},{66:[2,86],72:230,73:231,74:$VU,75:[1,232]},o($VW,[2,83]),{22:$Vf,26:233,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{27:[1,234]},{53:[2,88]},{25:[1,235]},{27:[2,97],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{53:[2,89]},{25:[1,236]},{27:[2,95],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{53:[2,90]},{22:$Vf,26:237,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{27:[1,238]},{66:[1,239]},o($Ve,[2,102]),{66:$VX,85:$VV,89:241,90:240},{22:[1,242]},o($Ve,[2,100]),o($VT,[2,108]),o($VT,[2,110]),o($Ve,[2,18]),{27:[1,243],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Ve,[2,26]),{27:[1,244],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Ve,[2,34]),o($Ve,[2,37]),o($Ve,[2,76]),o($Ve,[2,77]),{66:[1,245]},o($VW,[2,82]),{23:[1,246]},{23:[1,247],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},o($Ve,[2,80]),{22:$Vf,26:248,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{22:$Vf,26:249,50:$Vg,51:44,52:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm},{36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF,53:[2,91]},o($Ve,[2,98]),o($Ve,[2,101]),{66:[2,103]},{66:$VX,85:$VV,89:241,90:250},{52:[1,251]},o($Ve,[2,22]),o($Ve,[2,30]),o($Ve,[2,81]),{4:252,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd},{4:253,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd},{27:[2,96],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{27:[2,94],36:$Vs,37:$Vt,38:$Vu,39:$Vv,40:$Vw,41:$Vx,42:$Vy,43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,49:$VF},{66:[2,106]},{22:$VJ,53:[1,254],87:255,92:150},{6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,66:[2,85],68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd},o($VW,[2,84],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,6:33,21:$V0,22:$V1,29:$V2,30:$V3,59:$V4,60:$V5,61:$V6,62:$V7,68:$V8,69:$V9,70:$Va,76:$Vb,82:$Vc,85:$Vd}),{65:$VR,86:256},{53:[1,257],91:$VS},o($VY,[2,104]),{65:$VR,86:258},o($VY,[2,105])],
defaultActions: {32:[2,1],175:[2,92],176:[2,93],206:[2,88],209:[2,89],212:[2,90],240:[2,103],250:[2,106]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 56
break;
case 4:return 55
break;
case 5:return 54
break;
case 6:return 38
break;
case 7:return 39
break;
case 8:return 37
break;
case 9:return 36
break;
case 10:return 40
break;
case 11:return 41
break;
case 12:return 27
break;
case 13:return 23
break;
case 14:return 91
break;
case 15:return 83
break;
case 16:return 42
break;
case 17:return 44
break;
case 18:return 43
break;
case 19:return 45
break;
case 20:return 46
break;
case 21:return 47
break;
case 22:return 49
break;
case 23:return 48
break;
case 24:return 50
break;
case 25:return 25
break;
case 26:return 52
break;
case 27:return 53 
break;
case 28:return 65
break;
case 29:return 66
break;
case 30:return 34
break;
case 31:return 35
break;
case 32:return 66
break;
case 33:return 66
break;
case 34:return 29
break;
case 35:return 21
break;
case 36:return 30
break;
case 37:return 62
break;
case 38:return 67
break;
case 39:return 70
break;
case 40:return 75
break;
case 41:return 74
break;
case 42:return 68
break;
case 43:return 69
break;
case 44:return 76
break;
case 45:return 82
break;
case 46:return 84
break;
case 47:return 59
break;
case 48:return 60
break;
case 49:return 61
break;
case 50:return 85
break;
case 51:return 31
break;
case 52:return 32
break;
case 53:return 33
break;
case 54:return 57
break;
case 55:return 58
break;
case 56:return 80
break;
case 57:return 81
break;
case 58:return 22;
break;
case 59:return 5;
break;
case 60:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+(\.[0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}