/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,24],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,36],$V6=[1,37],$V7=[1,39],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,44],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[1,29],$Vh=[1,31],$Vi=[1,32],$Vj=[1,30],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[5,23,24,31,32,33,36,45,56,58,60,61,62,63,64,65,66,67,68,72,73,74,78,79,80,86,89],$Vo=[2,78],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,71],$VC=[1,76],$VD=[25,29,37,44,45,46,47,48,49,50,51,52,53,54,55,59],$VE=[1,87],$VF=[1,99],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[25,29,37,44,45,50,51,52,53,54,55,59],$VK=[27,29,36,37,42,59],$VL=[37,59],$VM=[25,29,37,44,45,46,47,50,51,52,53,54,55,59],$VN=[25,29,37,50,51,52,53,54,55,59],$VO=[25,29,37,52,53,54,55,59],$VP=[5,23,24,31,32,33,36,45,56,58,60,61,62,63,64,65,66,67,68,71,72,73,74,78,79,80,86,89],$VQ=[1,171],$VR=[27,29],$VS=[1,187],$VT=[1,200],$VU=[1,201],$VV=[1,209],$VW=[1,211],$VX=[36,37],$VY=[1,232],$VZ=[1,246],$V_=[36,78,79],$V$=[2,117],$V01=[36,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"DECLARACION_LET":8,"DECLARACION_CONST":9,"DECLARACION_TYPE":10,"DECLARACION_SIN_TIPO":11,"BREAK":12,"CONTINUE":13,"RETURN":14,"IF":15,"SWITCH":16,"WHILE":17,"DOWHILE":18,"FOR":19,"CONSOLE":20,"LLAMADA_FUNCION":21,"FUNCIONES":22,"PR_VAR":23,"ID":24,":":25,"TIPO":26,"=":27,"EXPRESION":28,";":29,"ARREGLO":30,"PR_LET":31,"PR_CONST":32,"PR_TYPE":33,"{":34,"DATOS_PRIMITIVOS":35,"}":36,",":37,"DATO_PRIMITIVO":38,"PR_STRING":39,"PR_NUMBER":40,"PR_BOOLEAN":41,"[":42,"]":43,"+":44,"-":45,"*":46,"/":47,"%":48,"^":49,"<":50,">":51,"==":52,"!=":53,"&&":54,"||":55,"!":56,"IDENTIFICADOR":57,"(":58,")":59,"CADENA":60,"NUMERO":61,"DECIMAL":62,"PR_TRUE":63,"PR_FALSE":64,"PR_BREAK":65,"PR_CONTINUE":66,"PR_RETURN":67,"PR_IF":68,"SENTENCIA":69,"ELSEIF":70,"PR_ELSE":71,"PR_WHILE":72,"PR_DO":73,"PR_SWITCH":74,"CASES":75,"DEFAULT":76,"CASE":77,"PR_CASE":78,"PR_DEFAULT":79,"PR_FOR":80,"FOREXP":81,"TIPOFOR":82,"DECLARACION_FOR":83,"PR_OF":84,"PR_IN":85,"PR_CONSOLE":86,".":87,"PR_LOG":88,"PR_FUNCTION":89,"SENTENCIA_FUNCION":90,"PARAMETROS":91,"FUNCIONHIJA":92,"FUNCION_HIJA":93,"OTRA_INSTRUCCION":94,"PARAMETRO":95,"PARAMETROS_LLAMADA":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"PR_VAR",24:"ID",25:":",27:"=",29:";",31:"PR_LET",32:"PR_CONST",33:"PR_TYPE",34:"{",36:"}",37:",",39:"PR_STRING",40:"PR_NUMBER",41:"PR_BOOLEAN",42:"[",43:"]",44:"+",45:"-",46:"*",47:"/",48:"%",49:"^",50:"<",51:">",52:"==",53:"!=",54:"&&",55:"||",56:"!",58:"(",59:")",60:"CADENA",61:"NUMERO",62:"DECIMAL",63:"PR_TRUE",64:"PR_FALSE",65:"PR_BREAK",66:"PR_CONTINUE",67:"PR_RETURN",68:"PR_IF",71:"PR_ELSE",72:"PR_WHILE",73:"PR_DO",74:"PR_SWITCH",78:"PR_CASE",79:"PR_DEFAULT",80:"PR_FOR",84:"PR_OF",85:"PR_IN",86:"PR_CONSOLE",87:".",88:"PR_LOG",89:"PR_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,8],[7,6],[7,6],[7,4],[8,7],[8,5],[8,5],[8,3],[8,8],[8,6],[8,6],[8,4],[9,7],[9,5],[11,6],[11,7],[11,4],[11,2],[10,7],[35,3],[35,1],[38,3],[26,1],[26,1],[26,1],[26,1],[30,2],[30,4],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,2],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,1],[57,3],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[12,2],[13,2],[14,2],[14,3],[15,6],[69,3],[69,2],[70,2],[70,2],[70,0],[17,5],[18,7],[16,8],[75,2],[75,1],[77,4],[76,3],[76,0],[19,5],[81,4],[81,4],[81,4],[81,5],[82,1],[82,1],[83,6],[83,4],[83,6],[83,4],[20,7],[22,5],[22,6],[90,3],[90,2],[92,2],[93,5],[93,6],[94,2],[94,0],[91,3],[91,1],[95,3],[21,4],[21,5],[96,3],[96,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node) };
        return this.$;
    
break;
case 2:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node) };
    
break;
case 3:

        this.$ = { node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 4:

        this.$ = { node: newNode(yy, yystate, $$[$0].node) };
    
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 44: case 71: case 93: case 124:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 19: case 117: case 119:

        this.$ = $$[$0];
    
break;
case 20:

        this.$ = { node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0]) };
    
break;
case 21: case 22:

        this.$ = { node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 23:

        this.$ = { node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0]) };
    
break;
case 24: case 32:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 25: case 33:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 26: case 34: case 38:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 27: case 35: case 40: case 99: case 100:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 28: case 36:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 29: case 30: case 37:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 31:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 39:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 41:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node)};
    
break;
case 42:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 43: case 52: case 53: case 54: case 55: case 56: case 57: case 60: case 61: case 64: case 65: case 66: case 67: case 123:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 45: case 95:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 46: case 102:

        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 47: case 48: case 49: case 103:
 
        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 50: case 79: case 80: case 81: case 85:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 51:
 
        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 58:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, "**", $$[$0].node)};
    
break;
case 59:

        this.$ = {node: newNode(yy, yystate, "-", $$[$0].node)};
    
break;
case 62: case 63:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, "<=", $$[$0].node)};
    
break;
case 68: case 86: case 87:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
    
break;
case 69: case 70:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 72: case 82: case 84:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 73:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1)
        };
    
break;
case 74: case 75:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
        };
    
break;
case 76: case 77:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
        };
    
break;
case 78:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column)
        };
    
break;
case 83:

        if($$[$0] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node)};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0].node)};
        }
    
break;
case 88: case 96:

        this.$ = null;
    
break;
case 89: case 97:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 90:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 91:

        if($$[$0-1] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0])};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
        }
    
break;
case 92:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
    
break;
case 94:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 98:

       this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 101:

        this.$ = {node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 104: case 106:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 105: case 107:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 108:

        this.$ = {
            node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0]),
            ejecutar: new Imprimir($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
        };
    
break;
case 109: case 114:

        this.$ = $$[$0-4];
    
break;
case 110: case 115:

        this.$ = $$[$0-5];
    
break;
case 111: case 118: case 120:

        this.$ = $$[$0-2];
    
break;
case 112: case 113: case 116:

        this.$ = $$[$0-1];
    
break;
case 121:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 122:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:25,31:$V2,32:$V3,33:$V4,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm},{1:[3]},{5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:25,31:$V2,32:$V3,33:$V4,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),{24:[1,47]},{24:[1,48]},{24:[1,49]},{24:[1,50]},o([29,44,45,46,47,48,49,50,51,52,53,54,55],$Vo,{25:[1,51],27:[1,52],58:[1,53]}),{29:[1,54],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{29:[1,67]},{29:[1,68]},{24:$VB,28:70,29:[1,69],45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{58:[1,72]},{58:[1,73]},{58:[1,74]},{34:$VC,69:75},{58:[1,77]},{87:[1,78]},{24:[1,79]},{24:$VB,28:80,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:81,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VD,[2,71]),{24:$VB,28:82,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),{1:[2,1]},o($Vn,[2,2]),{25:[1,83],27:[1,84],29:[1,85],30:86,42:$VE},{25:[1,88],27:[1,89],29:[1,90],30:91,42:$VE},{25:[1,92],27:[1,93]},{27:[1,94]},{24:$VF,26:95,39:$VG,40:$VH,41:$VI},{24:$VB,28:100,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:103,45:$V5,56:$V6,57:38,58:$V7,59:[1,101],60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,96:102},o($Vn,[2,41]),{24:$VB,28:104,44:[1,105],45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:106,45:[1,107],56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:108,45:$V5,46:[1,109],56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:110,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:111,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:112,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,27:[1,114],28:113,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,27:[1,116],28:115,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:117,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:118,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:119,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:120,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,79]),o($Vn,[2,80]),o($Vn,[2,81]),{29:[1,121],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($VD,$Vo),{24:$VB,28:122,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:123,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:124,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{72:[1,125]},{4:126,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:25,31:$V2,32:$V3,33:$V4,36:[1,127],45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm},{23:[1,130],31:[1,129],32:[1,131],81:128,83:132},{88:[1,133]},{58:[1,134]},o($VJ,[2,59],{46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VD,[2,68]),{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,59:[1,135]},{24:$VF,26:136,39:$VG,40:$VH,41:$VI},{24:$VB,28:137,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,23]),{27:[1,138],29:[1,139]},{43:[1,140]},{24:$VF,26:141,39:$VG,40:$VH,41:$VI},{24:$VB,28:142,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,31]),{27:[1,143],29:[1,144]},{24:$VF,26:145,39:$VG,40:$VH,41:$VI},{24:$VB,28:146,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{34:[1,147]},{27:[1,148],30:149,42:$VE},o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),o($VK,[2,49]),{29:[1,150],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{29:[1,151]},{37:[1,153],59:[1,152]},o($VL,[2,124],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VJ,[2,52],{46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VD,[2,69]),o($VJ,[2,53],{46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VD,[2,70],{57:38,28:80,24:$VB,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc}),o($VM,[2,54],{48:$Vt,49:$Vu}),{24:$VB,28:154,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VM,[2,55],{48:$Vt,49:$Vu}),o($VD,[2,56]),o($VD,[2,57]),o($VN,[2,60],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu}),{24:$VB,28:155,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VN,[2,61],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu}),{24:$VB,28:156,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VO,[2,64],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw}),o($VO,[2,65],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw}),o([25,29,37,54,55,59],[2,66],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),o([25,29,37,55,59],[2,67],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($Vn,[2,82]),{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,59:[1,157]},{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,59:[1,158]},{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,59:[1,159]},{58:[1,160]},{6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:25,31:$V2,32:$V3,33:$V4,36:[1,161],45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm},o($VP,[2,85]),{59:[1,162]},{24:[1,163]},{24:[1,164]},{24:[1,165]},{29:[1,166]},{58:[1,167]},{24:$VQ,59:[1,168],91:169,95:170},o($VD,[2,72]),{27:[1,172],29:[1,173],30:174,42:$VE},{29:[1,175],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{24:$VB,28:176,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,27]),o($VR,[2,50],{42:[1,177]}),{27:[1,178],29:[1,179],30:180,42:$VE},{29:[1,181],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{24:$VB,28:182,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,35]),{27:[1,183]},{29:[1,184],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{24:$VS,35:185,38:186},{24:$VB,28:188,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{27:[1,189]},o($Vn,[2,40]),o($Vn,[2,121]),{29:[1,190]},{24:$VB,28:191,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VM,[2,58],{48:$Vt,49:$Vu}),o($VN,[2,62],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VN,[2,63],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu}),{34:$VC,69:192},{34:[1,193]},{34:$VC,69:194},{24:$VB,28:195,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($VP,[2,84]),{34:$VC,69:196},{25:[1,198],27:[1,199],82:197,84:$VT,85:$VU},{25:[1,203],27:[1,204],82:202,84:$VT,85:$VU},{82:205,84:$VT,85:$VU},{24:$VB,28:206,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:207,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{34:$VV,90:208},{37:$VW,59:[1,210]},o($VL,[2,119]),{25:[1,212]},{24:$VB,28:213,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,21]),{27:[1,214],29:[1,215]},o($Vn,[2,22]),{29:[1,216],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{43:[1,217]},{24:$VB,28:218,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,29]),{27:[1,219],29:[1,220]},o($Vn,[2,30]),{29:[1,221],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{24:$VB,28:222,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,37]),{36:[1,223],37:[1,224]},o($VX,[2,44]),{25:[1,225]},{29:[1,226],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{24:$VB,28:227,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,122]),o($VL,[2,123],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($Vn,[2,88],{70:228,71:[1,229]}),{75:230,77:231,78:$VY},o($Vn,[2,89]),{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,59:[1,233]},o($Vn,[2,97]),{24:[1,234]},{24:$VF,26:235,39:$VG,40:$VH,41:$VI},{24:$VB,28:236,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:[2,102]},{24:[2,103]},{24:[1,237]},{24:$VF,26:238,39:$VG,40:$VH,41:$VI},{24:$VB,28:239,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:[1,240]},{29:[1,241],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,59:[1,242]},o($Vn,[2,109]),{36:[1,244],89:$VZ,92:243,93:245},{34:$VV,90:247},{24:$VQ,95:248},{24:$VF,26:249,39:$VG,40:$VH,41:$VI},{29:[1,250],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{24:$VB,28:251,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,25]),o($Vn,[2,26]),o($VR,[2,51]),{29:[1,252],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{24:$VB,28:253,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vn,[2,33]),o($Vn,[2,34]),{29:[1,254],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{29:[1,255]},{24:$VS,38:256},{24:$VF,26:257,39:$VG,40:$VH,41:$VI},o($Vn,[2,38]),{29:[1,258],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($Vn,[2,83]),{15:260,34:$VC,68:$Vg,69:259},{36:[2,96],76:261,77:262,78:$VY,79:[1,263]},o($V_,[2,93]),{24:$VB,28:264,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{29:[1,265]},{59:[2,98]},{27:[1,266]},{29:[2,107],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{59:[2,99]},{27:[1,267]},{29:[2,105],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{59:[2,100]},{24:$VB,28:268,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{29:[1,269]},{36:[1,270]},o($Vn,[2,112]),{36:$V$,89:$VZ,93:272,94:271},{24:[1,273]},o($Vn,[2,110]),o($VL,[2,118]),o($VL,[2,120]),o($Vn,[2,20]),{29:[1,274],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($Vn,[2,28]),{29:[1,275],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($Vn,[2,36]),o($Vn,[2,42]),o($VX,[2,43]),o($VX,[2,45]),o($Vn,[2,39]),o($Vn,[2,86]),o($Vn,[2,87]),{36:[1,276]},o($V_,[2,92]),{25:[1,277]},{25:[1,278],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},o($Vn,[2,90]),{24:$VB,28:279,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:$VB,28:280,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,59:[2,101]},o($Vn,[2,108]),o($Vn,[2,111]),{36:[2,113]},{36:$V$,89:$VZ,93:272,94:281},{58:[1,282]},o($Vn,[2,24]),o($Vn,[2,32]),o($Vn,[2,91]),{4:283,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:25,31:$V2,32:$V3,33:$V4,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm},{4:284,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:25,31:$V2,32:$V3,33:$V4,45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm},{29:[2,106],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{29:[2,104],44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{36:[2,116]},{24:$VQ,59:[1,285],91:286,95:170},{6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:25,31:$V2,32:$V3,33:$V4,36:[2,95],45:$V5,56:$V6,57:38,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm},o($V_,[2,94],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,28:25,57:38,6:46,23:$V0,24:$V1,31:$V2,32:$V3,33:$V4,45:$V5,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc,65:$Vd,66:$Ve,67:$Vf,68:$Vg,72:$Vh,73:$Vi,74:$Vj,80:$Vk,86:$Vl,89:$Vm}),{34:$VV,90:287},{37:$VW,59:[1,288]},o($V01,[2,114]),{34:$VV,90:289},o($V01,[2,115])],
defaultActions: {45:[2,1],200:[2,102],201:[2,103],234:[2,98],237:[2,99],240:[2,100],271:[2,113],281:[2,116]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Acceso } = require('../expresion/acceso.expresion');
    const { Literal } = require('../expresion/literal.expresion');
    const { Declaracion } = require('../instruccion/declaracion.instruccion');
    const { Imprimir } = require('../instruccion/console.instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 62
break;
case 4:return 61
break;
case 5:return 60
break;
case 6:return 60
break;
case 7:return 60
break;
case 8:return 46
break;
case 9:return 47
break;
case 10:return 45
break;
case 11:return 44
break;
case 12:return 48
break;
case 13:return 49
break;
case 14:return 29
break;
case 15:return 25
break;
case 16:return 37
break;
case 17:return 87
break;
case 18:return 50
break;
case 19:return 51
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 52
break;
case 23:return 53
break;
case 24:return 55
break;
case 25:return 54
break;
case 26:return 56
break;
case 27:return 27
break;
case 28:return 58
break;
case 29:return 59 
break;
case 30:return 34
break;
case 31:return 36
break;
case 32:return 42
break;
case 33:return 43
break;
case 34:return 36
break;
case 35:return 36
break;
case 36:return 31
break;
case 37:return 23
break;
case 38:return 32
break;
case 39:return 68
break;
case 40:return 71
break;
case 41:return 74
break;
case 42:return 79
break;
case 43:return 78
break;
case 44:return 72
break;
case 45:return 73
break;
case 46:return 80
break;
case 47:return 86
break;
case 48:return 88
break;
case 49:return 65
break;
case 50:return 66
break;
case 51:return 67
break;
case 52:return 89
break;
case 53:return 39
break;
case 54:return 40
break;
case 55:return 41
break;
case 56:return 63
break;
case 57:return 64
break;
case 58:return 84
break;
case 59:return 85
break;
case 60:return 33
break;
case 61:return 24;
break;
case 62:return 5;
break;
case 63:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:type\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}