/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,22],$V2=[1,20],$V3=[1,21],$V4=[1,44],$V5=[1,34],$V6=[1,35],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[1,42],$Vc=[1,43],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,29],$Vi=[1,30],$Vj=[1,28],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[5,22,23,30,31,32,34,43,54,57,59,60,61,62,63,67,68,69,70,74,75,76,80,81,82,89,91],$Vo=[2,70],$Vp=[1,53],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[1,64],$VA=[1,65],$VB=[1,66],$VC=[1,71],$VD=[1,76],$VE=[24,28,34,35,42,43,44,45,46,47,48,49,50,51,52,53,58],$VF=[1,85],$VG=[1,90],$VH=[1,98],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[24,28,34,35,42,43,48,49,50,51,52,53,58],$VM=[34,35],$VN=[26,28,34,35,40,58],$VO=[35,58],$VP=[24,28,34,35,42,43,44,45,48,49,50,51,52,53,58],$VQ=[24,28,34,35,48,49,50,51,52,53,58],$VR=[24,28,34,35,50,51,52,53,58],$VS=[5,22,23,30,31,32,34,43,54,57,59,60,61,62,63,67,68,69,70,73,74,75,76,80,81,82,89,91],$VT=[1,170],$VU=[26,28],$VV=[1,183],$VW=[1,196],$VX=[1,197],$VY=[1,205],$VZ=[1,207],$V_=[1,224],$V$=[1,238],$V01=[34,80,81],$V11=[2,114],$V21=[34,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_LET":7,"DECLARACION_CONST":8,"DECLARACION_TYPE":9,"DECLARACION_SIN_TIPO":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"LLAMADA_FUNCION":20,"FUNCIONES":21,"PR_LET":22,"ID":23,":":24,"TIPO":25,"=":26,"EXPRESION":27,";":28,"ARREGLO":29,"PR_CONST":30,"PR_TYPE":31,"{":32,"DATOS_PRIMITIVOS":33,"}":34,",":35,"DATO_PRIMITIVO":36,"PR_STRING":37,"PR_NUMBER":38,"PR_BOOLEAN":39,"[":40,"]":41,"+":42,"-":43,"*":44,"/":45,"%":46,"^":47,"<":48,">":49,"==":50,"!=":51,"&&":52,"||":53,"!":54,"IDENTIFICADOR":55,"EXPRESION_JSON":56,"(":57,")":58,"CADENA":59,"NUMERO":60,"DECIMAL":61,"PR_TRUE":62,"PR_FALSE":63,".":64,"OBJETOS":65,"OBJECT":66,"PR_BREAK":67,"PR_CONTINUE":68,"PR_RETURN":69,"PR_IF":70,"SENTENCIA":71,"ELSEIF":72,"PR_ELSE":73,"PR_WHILE":74,"PR_DO":75,"PR_SWITCH":76,"CASES":77,"DEFAULT":78,"CASE":79,"PR_CASE":80,"PR_DEFAULT":81,"PR_FOR":82,"FOREXP":83,"TIPOFOR":84,"PR_VAR":85,"DECLARACION_FOR":86,"PR_OF":87,"PR_IN":88,"PR_CONSOLE":89,"PR_LOG":90,"PR_FUNCTION":91,"SENTENCIA_FUNCION":92,"PARAMETROS":93,"FUNCIONHIJA":94,"FUNCION_HIJA":95,"OTRA_INSTRUCCION":96,"PARAMETRO":97,"PARAMETROS_LLAMADA":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"PR_LET",23:"ID",24:":",26:"=",28:";",30:"PR_CONST",31:"PR_TYPE",32:"{",34:"}",35:",",37:"PR_STRING",38:"PR_NUMBER",39:"PR_BOOLEAN",40:"[",41:"]",42:"+",43:"-",44:"*",45:"/",46:"%",47:"^",48:"<",49:">",50:"==",51:"!=",52:"&&",53:"||",54:"!",57:"(",58:")",59:"CADENA",60:"NUMERO",61:"DECIMAL",62:"PR_TRUE",63:"PR_FALSE",64:".",67:"PR_BREAK",68:"PR_CONTINUE",69:"PR_RETURN",70:"PR_IF",73:"PR_ELSE",74:"PR_WHILE",75:"PR_DO",76:"PR_SWITCH",80:"PR_CASE",81:"PR_DEFAULT",82:"PR_FOR",85:"PR_VAR",87:"PR_OF",88:"PR_IN",89:"PR_CONSOLE",90:"PR_LOG",91:"PR_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,8],[7,6],[7,6],[7,4],[8,7],[8,5],[10,6],[10,7],[10,4],[10,2],[9,7],[33,3],[33,1],[36,3],[25,1],[25,1],[25,1],[25,1],[29,2],[29,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,2],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,1],[27,1],[55,3],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,3],[56,3],[65,3],[65,1],[66,3],[11,2],[12,2],[13,2],[13,3],[14,6],[71,3],[71,2],[72,2],[72,2],[72,0],[16,5],[17,7],[15,8],[77,2],[77,1],[79,4],[78,3],[78,0],[18,5],[83,4],[83,4],[83,4],[83,5],[84,1],[84,1],[86,6],[86,4],[86,6],[86,4],[19,7],[21,5],[21,6],[92,3],[92,2],[94,2],[95,5],[95,6],[96,2],[96,0],[93,3],[93,1],[97,3],[20,4],[20,5],[98,3],[98,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node) };
        return this.$;
    
break;
case 2:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node) };
    
break;
case 3:

        this.$ = { node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 35: case 62: case 63: case 74: case 90: case 121:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 18: case 114: case 116:

        this.$ = $$[$0];
    
break;
case 19: case 27:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 20: case 21: case 28:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 22:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 23:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 24:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 25: case 29:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 26: case 31: case 96: case 97:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 30:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 32:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node)};
    
break;
case 33:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 34: case 43: case 44: case 45: case 46: case 47: case 48: case 51: case 52: case 55: case 56: case 57: case 58: case 73: case 120:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 36: case 75: case 92:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 37: case 99:

        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 38: case 39: case 40: case 100:
 
        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 41: case 76: case 77: case 78: case 82:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 42:
 
        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 49:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, "**", $$[$0].node)};
    
break;
case 50:

        this.$ = {node: newNode(yy, yystate, "-", $$[$0].node)};
    
break;
case 53: case 54:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, "<=", $$[$0].node)};
    
break;
case 59: case 83: case 84:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
    
break;
case 60: case 61:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 64: case 72: case 79: case 81:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 65:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1)
        };
    
break;
case 66: case 67:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
        };
    
break;
case 68: case 69:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
        };
    
break;
case 70:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column)
        };
    
break;
case 71:

        this.$ = {
            node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])
        };
    
break;
case 80:

        if($$[$0] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node)};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0].node)};
        }
    
break;
case 85: case 93:

        this.$ = null;
    
break;
case 86: case 94:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 87:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 88:

        if($$[$0-1] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0])};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
        }
    
break;
case 89:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
    
break;
case 91:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 95:

       this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 98:

        this.$ = {node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 101: case 103:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 102: case 104:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 105:

        this.$ = {
            node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0]),
            ejecutar: new Imprimir($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
        };
    
break;
case 106: case 111:

        this.$ = $$[$0-4];
    
break;
case 107: case 112:

        this.$ = $$[$0-5];
    
break;
case 108: case 115: case 117:

        this.$ = $$[$0-2];
    
break;
case 109: case 110: case 113:

        this.$ = $$[$0-1];
    
break;
case 118:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 119:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm},{1:[3]},{5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),{23:[1,47]},{23:[1,48]},{23:[1,49]},o([28,42,43,44,45,46,47,48,49,50,51,52,53],$Vo,{24:[1,50],26:[1,51],57:[1,52],64:$Vp}),{28:[1,54],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{28:[1,67]},{28:[1,68]},{23:$VC,27:70,28:[1,69],32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{57:[1,72]},{57:[1,73]},{57:[1,74]},{32:$VD,71:75},{57:[1,77]},{64:[1,78]},{23:[1,79]},{23:$VC,27:80,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:81,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($VE,[2,62]),o($VE,[2,63]),{23:$VC,27:82,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($VE,[2,65]),o($VE,[2,66]),o($VE,[2,67]),o($VE,[2,68]),o($VE,[2,69]),{23:$VF,65:83,66:84},{1:[2,1]},o($Vn,[2,2]),{24:[1,86],26:[1,87],28:[1,88],29:89,40:$VG},{24:[1,91],26:[1,92]},{26:[1,93]},{23:$VH,25:94,37:$VI,38:$VJ,39:$VK},{23:$VC,27:99,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:102,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,58:[1,100],59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,98:101},{23:[1,103]},o($Vn,[2,32]),{23:$VC,27:104,32:$V4,42:[1,105],43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:106,32:$V4,43:[1,107],54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:108,32:$V4,43:$V5,44:[1,109],54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:110,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:111,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:112,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,26:[1,114],27:113,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,26:[1,116],27:115,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:117,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:118,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:119,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:120,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($Vn,[2,76]),o($Vn,[2,77]),o($Vn,[2,78]),{28:[1,121],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},o($VE,$Vo,{64:$Vp}),{23:$VC,27:122,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:123,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:124,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{74:[1,125]},{4:126,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,34:[1,127],43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm},{22:[1,129],30:[1,131],83:128,85:[1,130],86:132},{90:[1,133]},{57:[1,134]},o($VL,[2,50],{44:$Vs,45:$Vt,46:$Vu,47:$Vv}),o($VE,[2,59]),{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,58:[1,135]},{34:[1,136],35:[1,137]},o($VM,[2,74]),{24:[1,138]},{23:$VH,25:139,37:$VI,38:$VJ,39:$VK},{23:$VC,27:140,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($Vn,[2,22]),{26:[1,141],28:[1,142]},{41:[1,143]},{23:$VH,25:144,37:$VI,38:$VJ,39:$VK},{23:$VC,27:145,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{32:[1,146]},{26:[1,147],29:148,40:$VG},o($VN,[2,37]),o($VN,[2,38]),o($VN,[2,39]),o($VN,[2,40]),{28:[1,149],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{28:[1,150]},{35:[1,152],58:[1,151]},o($VO,[2,121],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB}),o($VE,[2,71]),o($VL,[2,43],{44:$Vs,45:$Vt,46:$Vu,47:$Vv}),o($VE,[2,60]),o($VL,[2,44],{44:$Vs,45:$Vt,46:$Vu,47:$Vv}),o($VE,[2,61],{55:36,56:37,27:80,23:$VC,32:$V4,54:$V6,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc}),o($VP,[2,45],{46:$Vu,47:$Vv}),{23:$VC,27:153,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($VP,[2,46],{46:$Vu,47:$Vv}),o($VE,[2,47]),o($VE,[2,48]),o($VQ,[2,51],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv}),{23:$VC,27:154,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($VQ,[2,52],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv}),{23:$VC,27:155,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($VR,[2,55],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx}),o($VR,[2,56],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx}),o([24,28,34,35,52,53,58],[2,57],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o([24,28,34,35,53,58],[2,58],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($Vn,[2,79]),{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,58:[1,156]},{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,58:[1,157]},{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,58:[1,158]},{57:[1,159]},{6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,34:[1,160],43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm},o($VS,[2,82]),{58:[1,161]},{23:[1,162]},{23:[1,163]},{23:[1,164]},{28:[1,165]},{57:[1,166]},{23:$VT,58:[1,167],93:168,97:169},o($VE,[2,64]),o($VE,[2,72]),{23:$VF,66:171},{23:$VC,27:172,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{26:[1,173],28:[1,174],29:175,40:$VG},{28:[1,176],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{23:$VC,27:177,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($Vn,[2,26]),o($VU,[2,41],{40:[1,178]}),{26:[1,179]},{28:[1,180],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{23:$VV,33:181,36:182},{23:$VC,27:184,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{26:[1,185]},o($Vn,[2,31]),o($Vn,[2,118]),{28:[1,186]},{23:$VC,27:187,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($VP,[2,49],{46:$Vu,47:$Vv}),o($VQ,[2,53],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv}),o($VQ,[2,54],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv}),{32:$VD,71:188},{32:[1,189]},{32:$VD,71:190},{23:$VC,27:191,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($VS,[2,81]),{32:$VD,71:192},{24:[1,194],26:[1,195],84:193,87:$VW,88:$VX},{24:[1,199],26:[1,200],84:198,87:$VW,88:$VX},{84:201,87:$VW,88:$VX},{23:$VC,27:202,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:203,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{32:$VY,92:204},{35:$VZ,58:[1,206]},o($VO,[2,116]),{24:[1,208]},o($VM,[2,73]),o($VM,[2,75],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB}),{23:$VC,27:209,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($Vn,[2,20]),{26:[1,210],28:[1,211]},o($Vn,[2,21]),{28:[1,212],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{41:[1,213]},{23:$VC,27:214,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($Vn,[2,28]),{34:[1,215],35:[1,216]},o($VM,[2,35]),{24:[1,217]},{28:[1,218],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{23:$VC,27:219,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($Vn,[2,119]),o($VO,[2,120],{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB}),o($Vn,[2,85],{72:220,73:[1,221]}),{77:222,79:223,80:$V_},o($Vn,[2,86]),{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,58:[1,225]},o($Vn,[2,94]),{23:[1,226]},{23:$VH,25:227,37:$VI,38:$VJ,39:$VK},{23:$VC,27:228,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:[2,99]},{23:[2,100]},{23:[1,229]},{23:$VH,25:230,37:$VI,38:$VJ,39:$VK},{23:$VC,27:231,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:[1,232]},{28:[1,233],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,58:[1,234]},o($Vn,[2,106]),{34:[1,236],91:$V$,94:235,95:237},{32:$VY,92:239},{23:$VT,97:240},{23:$VH,25:241,37:$VI,38:$VJ,39:$VK},{28:[1,242],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{23:$VC,27:243,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},o($Vn,[2,24]),o($Vn,[2,25]),o($VU,[2,42]),{28:[1,244],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{28:[1,245]},{23:$VV,36:246},{23:$VH,25:247,37:$VI,38:$VJ,39:$VK},o($Vn,[2,29]),{28:[1,248],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},o($Vn,[2,80]),{14:250,32:$VD,70:$Vg,71:249},{34:[2,93],78:251,79:252,80:$V_,81:[1,253]},o($V01,[2,90]),{23:$VC,27:254,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{28:[1,255]},{58:[2,95]},{26:[1,256]},{28:[2,104],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{58:[2,96]},{26:[1,257]},{28:[2,102],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{58:[2,97]},{23:$VC,27:258,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{28:[1,259]},{34:[1,260]},o($Vn,[2,109]),{34:$V11,91:$V$,95:262,96:261},{23:[1,263]},o($Vn,[2,107]),o($VO,[2,115]),o($VO,[2,117]),o($Vn,[2,19]),{28:[1,264],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},o($Vn,[2,27]),o($Vn,[2,33]),o($VM,[2,34]),o($VM,[2,36]),o($Vn,[2,30]),o($Vn,[2,83]),o($Vn,[2,84]),{34:[1,265]},o($V01,[2,89]),{24:[1,266]},{24:[1,267],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},o($Vn,[2,87]),{23:$VC,27:268,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{23:$VC,27:269,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc},{42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,58:[2,98]},o($Vn,[2,105]),o($Vn,[2,108]),{34:[2,110]},{34:$V11,91:$V$,95:262,96:270},{57:[1,271]},o($Vn,[2,23]),o($Vn,[2,88]),{4:272,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm},{4:273,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm},{28:[2,103],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{28:[2,101],42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB},{34:[2,113]},{23:$VT,58:[1,274],93:275,97:169},{6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,27:23,30:$V2,31:$V3,32:$V4,34:[2,92],43:$V5,54:$V6,55:36,56:37,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm},o($V01,[2,91],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,27:23,55:36,56:37,6:46,22:$V0,23:$V1,30:$V2,31:$V3,32:$V4,43:$V5,54:$V6,57:$V7,59:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,74:$Vh,75:$Vi,76:$Vj,82:$Vk,89:$Vl,91:$Vm}),{32:$VY,92:276},{35:$VZ,58:[1,277]},o($V21,[2,111]),{32:$VY,92:278},o($V21,[2,112])],
defaultActions: {45:[2,1],196:[2,99],197:[2,100],226:[2,95],229:[2,96],232:[2,97],261:[2,110],270:[2,113]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Acceso } = require('../expresion/acceso.expresion');
    const { Literal } = require('../expresion/literal.expresion');
    const { Declaracion } = require('../instruccion/declaracion.instruccion');
    const { Imprimir } = require('../instruccion/console.instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 61
break;
case 4:return 60
break;
case 5:return 59
break;
case 6:return 59
break;
case 7:return 59
break;
case 8:return 44
break;
case 9:return 45
break;
case 10:return 43
break;
case 11:return 42
break;
case 12:return 46
break;
case 13:return 47
break;
case 14:return 28
break;
case 15:return 24
break;
case 16:return 35
break;
case 17:return 64
break;
case 18:return 48
break;
case 19:return 49
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 50
break;
case 23:return 51
break;
case 24:return 53
break;
case 25:return 52
break;
case 26:return 54
break;
case 27:return 26
break;
case 28:return 57
break;
case 29:return 58 
break;
case 30:return 32
break;
case 31:return 34
break;
case 32:return 40
break;
case 33:return 41
break;
case 34:return 34
break;
case 35:return 34
break;
case 36:return 22
break;
case 37:return 85
break;
case 38:return 30
break;
case 39:return 70
break;
case 40:return 73
break;
case 41:return 76
break;
case 42:return 81
break;
case 43:return 80
break;
case 44:return 74
break;
case 45:return 75
break;
case 46:return 82
break;
case 47:return 89
break;
case 48:return 90
break;
case 49:return 67
break;
case 50:return 68
break;
case 51:return 69
break;
case 52:return 91
break;
case 53:return 37
break;
case 54:return 38
break;
case 55:return 39
break;
case 56:return 62
break;
case 57:return 63
break;
case 58:return 87
break;
case 59:return 88
break;
case 60:return 31
break;
case 61:return 23;
break;
case 62:return 5;
break;
case 63:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:type\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}