/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,15],$V2=[1,13],$V3=[1,14],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[5,15,16,23,24,53,54,55,56,60],$V9=[1,39],$Va=[1,31],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[20,22],$Vi=[2,29],$Vj=[1,43],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,47],$VC=[20,22,28],$VD=[22,30,31,36,37,38,39,40,41,42,43,47],$VE=[22,30,31,32,33,36,37,38,39,40,41,42,43,47],$VF=[22,36,37,38,39,40,41,42,43,47],$VG=[22,40,41,42,43,47],$VH=[1,109],$VI=[5,15,16,23,24,53,54,55,56,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"DECLARACION_LET":8,"DECLARACION_CONST":9,"DECLARACION_SIN_TIPO":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"PR_VAR":15,"ID":16,":":17,"TIPO":18,"ARREGLO":19,"=":20,"EXPRESION":21,";":22,"PR_LET":23,"PR_CONST":24,"PR_STRING":25,"PR_NUMBER":26,"PR_BOOLEAN":27,"[":28,"]":29,"+":30,"-":31,"*":32,"/":33,"%":34,"^":35,"<":36,"<=":37,">":38,">=":39,"==":40,"!=":41,"&&":42,"||":43,"!":44,"IDENTIFICADOR":45,"(":46,")":47,"CADENA":48,"NUMERO":49,"DECIMAL":50,"PR_TRUE":51,"PR_FALSE":52,"PR_BREAK":53,"PR_CONTINUE":54,"PR_RETURN":55,"PR_IF":56,"SENTENCIA":57,"ELSEIF":58,"{":59,"}":60,"PR_ELSE":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"PR_VAR",16:"ID",17:":",20:"=",22:";",23:"PR_LET",24:"PR_CONST",25:"PR_STRING",26:"PR_NUMBER",27:"PR_BOOLEAN",28:"[",29:"]",30:"+",31:"-",32:"*",33:"/",34:"%",35:"^",36:"<",37:"<=",38:">",39:">=",40:"==",41:"!=",42:"&&",43:"||",44:"!",46:"(",47:")",48:"CADENA",49:"NUMERO",50:"DECIMAL",51:"PR_TRUE",52:"PR_FALSE",53:"PR_BREAK",54:"PR_CONTINUE",55:"PR_RETURN",56:"PR_IF",59:"{",60:"}",61:"PR_ELSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,8],[7,6],[7,6],[7,4],[8,8],[8,6],[8,6],[8,4],[9,7],[9,5],[10,7],[10,4],[18,1],[18,1],[18,1],[19,2],[19,4],[19,0],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,1],[45,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[11,2],[12,2],[13,2],[13,3],[14,6],[57,3],[57,2],[58,2],[58,2],[58,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 24: case 47:

        this.$ = $$[$0];
    
break;
case 12: case 16:

        this.$ = $$[$0-7];
    
break;
case 13: case 14: case 17: case 18: case 59:

        this.$ = $$[$0-5];
    
break;
case 15: case 19: case 23:

        this.$ = $$[$0-3];
    
break;
case 20: case 22:

        this.$ = $$[$0-6];
    
break;
case 21:

        this.$ = $$[$0-4];
    
break;
case 25: case 26: case 49: case 50: case 51: case 52: case 53: case 54:
 
        this.$ = $$[$0];
    
break;
case 27: case 55: case 56: case 57: case 61: case 62: case 63:

        this.$ = $$[$0-1];
    
break;
case 28:
 
        this.$ = $$[$0-3];
    
break;
case 29:
 
        this.$ = null;
    
break;
case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 45: case 46:

        this.$ = $$[$0-2]
    
break;
case 44:

        this.$ = $$[$0-1]
    
break;
case 48: case 58: case 60:

        this.$ = $$[$0-2];
    
break;
case 64:

        this.$ = null;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,23:$V2,24:$V3,53:$V4,54:$V5,55:$V6,56:$V7},{1:[3]},{5:[1,20],6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,23:$V2,24:$V3,53:$V4,54:$V5,55:$V6,56:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),{16:[1,22]},{16:[1,23]},{16:[1,24]},{17:[1,25],20:[1,26]},{22:[1,27]},{22:[1,28]},{16:$V9,21:30,22:[1,29],44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{46:[1,40]},{1:[2,1]},o($V8,[2,2]),o($Vh,$Vi,{19:42,17:[1,41],28:$Vj}),o($Vh,$Vi,{19:45,17:[1,44],28:$Vj}),{17:[1,46],20:[1,47]},{18:48,25:$Vk,26:$Vl,27:$Vm},{16:$V9,21:52,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($V8,[2,55]),o($V8,[2,56]),o($V8,[2,57]),{22:[1,53],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},{16:$V9,21:68,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($VB,[2,47]),{16:$V9,21:69,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),{16:$V9,21:70,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{18:71,25:$Vk,26:$Vl,27:$Vm},{20:[1,72],22:[1,73]},{29:[1,74]},{18:75,25:$Vk,26:$Vl,27:$Vm},{20:[1,76],22:[1,77]},{18:78,25:$Vk,26:$Vl,27:$Vm},{16:$V9,21:79,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{19:80,20:$Vi,28:$Vj},o($VC,[2,24]),o($VC,[2,25]),o($VC,[2,26]),{22:[1,81],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},o($V8,[2,58]),{16:$V9,21:82,30:[1,83],44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:84,31:[1,85],44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:86,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:87,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:88,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:89,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:90,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:91,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:92,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:93,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:94,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:95,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:96,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},{16:$V9,21:97,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($VB,[2,44]),{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,47:[1,98]},{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,47:[1,99]},o($Vh,$Vi,{19:100,28:$Vj}),{16:$V9,21:101,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($V8,[2,15]),o($Vh,[2,27],{28:[1,102]}),o($Vh,$Vi,{19:103,28:$Vj}),{16:$V9,21:104,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($V8,[2,19]),{20:[1,105]},{22:[1,106],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},{20:[1,107]},o($V8,[2,23]),o($VD,[2,30],{32:$Vp,33:$Vq,34:$Vr,35:$Vs}),o($VB,[2,45]),o($VD,[2,31],{32:$Vp,33:$Vq,34:$Vr,35:$Vs}),o($VB,[2,46]),o($VE,[2,32],{34:$Vr,35:$Vs}),o($VE,[2,33],{34:$Vr,35:$Vs}),o($VB,[2,34]),o($VB,[2,35]),o($VF,[2,36],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs}),o($VF,[2,37],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs}),o($VF,[2,38],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs}),o($VF,[2,39],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs}),o($VG,[2,40],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw}),o($VG,[2,41],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw}),o([22,42,43,47],[2,42],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy}),o([22,43,47],[2,43],{30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz}),o($VB,[2,48]),{57:108,59:$VH},{20:[1,110],22:[1,111]},{22:[1,112],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},{29:[1,113]},{20:[1,114],22:[1,115]},{22:[1,116],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},{16:$V9,21:117,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($V8,[2,21]),{16:$V9,21:118,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($V8,[2,64],{58:119,61:[1,120]}),{4:121,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,23:$V2,24:$V3,53:$V4,54:$V5,55:$V6,56:$V7,60:[1,122]},{16:$V9,21:123,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($V8,[2,13]),o($V8,[2,14]),o($Vh,[2,28]),{16:$V9,21:124,44:$Va,45:32,46:$Vb,48:$Vc,49:$Vd,50:$Ve,51:$Vf,52:$Vg},o($V8,[2,17]),o($V8,[2,18]),{22:[1,125],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},{22:[1,126],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},o($V8,[2,59]),{14:128,56:$V7,57:127,59:$VH},{6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,23:$V2,24:$V3,53:$V4,54:$V5,55:$V6,56:$V7,60:[1,129]},o($VI,[2,61]),{22:[1,130],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},{22:[1,131],30:$Vn,31:$Vo,32:$Vp,33:$Vq,34:$Vr,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA},o($V8,[2,20]),o($V8,[2,22]),o($V8,[2,62]),o($V8,[2,63]),o($VI,[2,60]),o($V8,[2,12]),o($V8,[2,16])],
defaultActions: {20:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 50
break;
case 4:return 49
break;
case 5:return 48
break;
case 6:return 32
break;
case 7:return 33
break;
case 8:return 31
break;
case 9:return 30
break;
case 10:return 34
break;
case 11:return 35
break;
case 12:return 22
break;
case 13:return 17
break;
case 14:return ','
break;
case 15:return '.'
break;
case 16:return 36
break;
case 17:return 38
break;
case 18:return 37
break;
case 19:return 39
break;
case 20:return 40
break;
case 21:return 41
break;
case 22:return 43
break;
case 23:return 42
break;
case 24:return 44
break;
case 25:return 20
break;
case 26:return 46
break;
case 27:return 47 
break;
case 28:return 59
break;
case 29:return 60
break;
case 30:return 28
break;
case 31:return 29
break;
case 32:return 60
break;
case 33:return 60
break;
case 34:return 23
break;
case 35:return 15
break;
case 36:return 24
break;
case 37:return 56
break;
case 38:return 61
break;
case 39:return 'PR_WHILE'
break;
case 40:return 'PR_DO'
break;
case 41:return 'PR_FOR'
break;
case 42:return 'PR_CONSOLE'
break;
case 43:return 'PR_LOG'
break;
case 44:return 53
break;
case 45:return 54
break;
case 46:return 55
break;
case 47:return 'PR_FUNCTION'
break;
case 48:return 25
break;
case 49:return 26
break;
case 50:return 27
break;
case 51:return 51
break;
case 52:return 52
break;
case 53:return 16;
break;
case 54:return 5;
break;
case 55:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+(\.[0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:,)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}